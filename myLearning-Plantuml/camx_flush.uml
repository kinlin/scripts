/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6. 
'/

@startuml

/'
Actually, I want to know what would happen, when flush
As the App will call the flush.

And when App call abortCaptures
this API's useage: Discard all captures currently pending and in-progress as fast as possible

If a repeating request list is set, it will be cleared


now two points:
1. how the camx keep request queue
2. what does the flush run.
'/
participant camxhaldevice

participant chxextensioninterface
participant chxextensionmodule
box "Usecase"
participant chxusecase
end box

participant camxsession
participant B
== <color:blue> How the camx keep request in a queue </color>==

== <color:blue> **What will happen when app call a flush** </color>==
... ...
[o->camxsession: Flush()
activate camxsession
  alt **m_sessionInitComplete == FALSE**
  else
    camxsession->camxsession: FlushHALQueue()
    activate camxsession
      note right camxsession
        <color:red>m_pRequestQueue->Dequeue</color> all the request, and
        run **PrepareAndDispatchRequestError**, which
        will return MessageTypeError and then release the request
        the <color:red>**HAL3Queue::EnqueueWait**</color>, will wait for 
        release and can enqueue a new request
      end note
    camxsession->camxsession: return
    deactivate camxsession
  end
[o<-camxsession: return
deactivate camxsession
... ...
== <color:blue> **Flush called from APP** </color>==
note left camxhaldevice
  App call flush and will go into here
end note
[o->camxhaldevice: **Flush()**
activate camxhaldevice
  camxhaldevice->chxextensioninterface: **chi_override_flush**
  activate chxextensioninterface
    chxextensioninterface->chxextensionmodule: **OverrideFlush**
    activate chxextensionmodule
      note right chxextensionmodule
        set **m_aFlushInProgress = TRUE**
        other thread will read this and stop process
      end note
      alt **m_pSelectedUsecase**
        chxextensionmodule->chxusecase: **Flush**
        activate chxusecase
          note right chxusecase
            usecase will run <color:blue>**ExecuteFlush()**</color>
            **-->FlushAllSessions()**
            this finally call **g_chiContextOps.pFlushSession**
            <color:blue>**CamX::ChiFlushSession                   **</color>
            <color:blue>**                     -> Session::Flush()**</color>
          end note
        chxextensionmodule<-chxusecase: return
        deactivate chxusecase
      end
    chxextensioninterface<-chxextensionmodule: **return**
    deactivate chxextensionmodule
  camxhaldevice<-chxextensioninterface: return
  deactivate chxextensioninterface
[o<-camxhaldevice: **return**
deactivate camxhaldevice



@enduml
