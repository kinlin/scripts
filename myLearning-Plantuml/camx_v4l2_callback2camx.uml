@startuml
title How camx pipeline get data callback? \n Jin Lin
participant Kernel
participant camxcslhw
participant camxcsl

participant camxchisession
participant camxsession
participant camxpipeline
participant camxnode


box "ThreadManager" #LightBlue
participant ThreadManager
end box

== 1. callback register ==
camxsession->camxpipeline: FinalizePipeline
activate camxpipeline
  camxpipeline->camxcsl: CSLRegisterMessagehandler(...CSLMessageHandler...)
  activate camxcsl
    camxcsl->camxcslhw: CSLRegisterMessageHandlerHW
    note over camxcslhw,camxcsl
      now the CSL messageHandler is registered with CSLMessageHandler
    end note
  deactivate camxcsl
deactivate camxpipeline

note over camxcslhw, camxcsl
  About the CSLJumpTable:
    CSLJumpTable g_CSLjumpTableHW =
    {
        CSLInitializeHW,
        CSLOpenHW,
        CSLCloseHW,
        ...
    }
  correspond to struct:
    struct CSLJumpTable
    {
        CamxResult (*CSLInitialize)(void);
        CamxResult (*CSLOpen)(CSLHandle* phCSL);
        CamxResult (*CSLClose)(CSLHandle* hCSL);
    }
end note



==2. how it works ==
loop N time
  camxcsl->camxcsl: *CSLHwInstancePollThreadFunc*
  note over camxcsl
    a thread created to Poll
    <color:red>This is also important as it contact with V4L2</color>
  end note
  camxcsl->Kernel: ioctl(...VIDIOC_DQEVENT...)
  Kernel->camxcsl: pV4L2_event
  camxcsl->camxcsl: CSLHwInternalSendRequestManagerEvent
  note over camxcsl
    event id is V4L_EVENT_CAM_REQ_MGR_SOF and
    V4L_EVENT_CAM_REQ_MGR_ERROR
  end note
  camxcsl->camxpipeline: messageHandler [that is CSLMessageHandler]
  activate camxpipeline
    camxpipeline->camxpipeline:SendSOFnotification
    camxpipeline->camxsession: m_pSession->NotifyResult
      activate camxsession
        camxsession->camxsession: HandleBufferCb
        camxsession->camxsession: InjectResult
        camxsession->camxpipeline: return
      deactivate camxsession
    camxpipeline->camxpipeline:SendShutterNotification
    camxpipeline->camxsession: m_pSession->NotifyResult
    note over camxsession
      will call m_pthreadManager->PostJob, send buffer ok or sof msg
      finally , will call CHISession::ThreadJobExecute
          ->camxsession.cpp    Session::ProcessRequest   [need confirm]
    end note
    activate camxsession
      alt case CbType::SOF
        camxsession->camxsession: HandleSOFCb

        camxsession->camxchisession: **DispatchNotify**
        note right camxchisession
          will call **m_chiCallbacks.ChiNotify**
          Normally, It's initialized in chxusecasedefault
          <color:green>**.ChiNotify = SessionCbNotifyMessage**
          But it also can override in other usecase like
          <color:red>**chxusecasemc**
        end note

      else case CbType::Buffer
        activate camxsession
          camxsession->camxsession: HandleBufferCb
          activate camxsession
            camxsession->camxsession: <color:red>**InjectResult**</color>
            note left camxsession
              will run **m_pThreadManager->PostJob**
              as we have a result needs to be processed
              and this actually Called <color:red>**ThreadJobCallback**
            end note
          camxsession->camxsession: return
          deactivate camxsession

        camxsession->camxsession: return
        deactivate camxsession
      else case CbType::Metadata
      end

    deactivate camxsession
  deactivate camxpipeline

==How CHISession manager the result callback? 1. Create ==
[->camxchisession: CHISession::Create
activate camxchisession
  camxchisession->camxchisession: CHISession::Initialize
  activate camxchisession
    camxchisession->camxsession: Session::Initialize
    camxchisession->ThreadManager: m_pThreadManager->RegisterJobFamily \n(ThreadJobCallback)

  camxchisession->camxchisession: return
  deactivate camxchisession

[<-camxchisession: return
deactivate camxchisession

loop 
ThreadManager->camxchisession: <color:red>**ThreadJobCallback**
activate camxchisession
  alt m_aCheckResults==TRUE
    note left camxchisession
      <color:blue><size:16>**We only handle results when**</size></color>
      <color:blue><size:16>**InjectResult set the Flag, otherwise not run**</size></color>
    end note
    camxchisession->camxsession: **ProcessResults**\n and Set <color:red>**m_aCheckResults**</color>==FALSE
    activate camxsession
    loop everyÂ Node
      alt **m_numMetadataResults > 1**
        camxsession->camxsession: ProcessResultEarlyMetadata
      end
      camxsession->camxsession: **ProcessResultMetadata**
      camxsession->camxsession: **ProcessResultBuffers**
      
    end loop
    camxsession->camxchisession: <color:red>**DispatchResults**
    note right camxchisession
      <color:red>**will call m_chiCallbacks.ChiProcessCaptureResult**
      This can also be override by usecase, for example:
      callbacks.ChidProcessCaptureResult = **SessionCbCaptureResult**
    end note
    camxsession->camxsession: AdvanceMinExpectedResult
    rnote over camxsession
      here we will check if we have <color:red>**Finished the Request**</color>
      if Request have done, will remove node and run
      <color:red>**m_pWaitLivePendingRequest->Signal**</color>
      <color:red>**m_pWaitAllResultsAvailable->Signal**</color>
      this 
    end rnote
    deactivate camxsession
  end
  camxchisession->camxsession: <color:red>**ProcessRequest**</color>\n after process result, go on process Request\notherwith run FlushRequests
  activate camxsession #red
    note over camxsession
      pSessionRequest = **m_pRequestQueue->Dequeue()**
      Dequeue from RequestQueue

      and have other process, ignore some of them
    end note
    camxsession->camxcsl: **CSLCreatePrivateFence**("InputBufferFence")
    activate camxcsl
    camxcsl->camxsession: return
    deactivate camxcsl

    loop requestIndex<pSessionRequest->numRequests
      camxsession->camxpipeline: **OpenRequest**
      activate camxpipeline
        camxpipeline->camxcsl: **CSLOpenRequest()**
        activate camxcsl
          note over camxcsl
            Creates a new process capture request
            with CSL for a CSL session
          end note
        camxcsl->camxpipeline: return
        deactivate camxcsl

      camxpipeline->camxsession: return
      deactivate camxpipeline
    end

    camxsession->camxsession: **DeterminActiveStreams()**
    activate camxsession
      note over camxsession
        set pTopologyPerframeInfo->sequenceId
        pTopologyPerFrameInfo->bufferInfo
        pTopologyPerFrameInfo->**activeStreamIdMask**
      end note
    camxsession->camxsession: return
    deactivate camxsession

    camxsession->camxcsl: **CSLFenceSignal()**
    activate camxcsl
      note over camxcsl
        Signal a fence from UMD
      end note
    camxcsl->camxsession: return
    deactivate camxcsl

    camxsession->camxpipeline: <color:red>**ProcessRequest**
    activate camxpipeline
        note over camxpipeline
          use **activeStreamIdMask** check
          if differentStreams=TRUE/FALSE
        end note
        alt IsExternalSensor()
          camxpipeline->camxpipeline: **PublishSensorModeInformation()**
          activate camxpipeline
          camxpipeline->camxpipeline: return
          deactivate camxpipeline
        end

        alt **FALSE == IsRealTime()**
          camxpipeline->camxpipeline: **SendOfflineShutterNotification()**
          activate camxpipeline
          camxpipeline->camxpipeline: return
          deactivate camxpipeline
        end

        loop m_nodeCount
          camxpipeline->camxnode: <color:red>**SetupRequest()**
          activate camxnode
            camxnode->camxnode: <color:red>**SetupRequestOutputPorts()**
            activate camxnode
              alt IsSinkPortWithBuffer==True ||\n((IsNonSinkHALBufferOutput==True)&&(IsTorchWidgetNode==False))
                camxnode->camxnode: ProcessSinkPortNewRequest
                activate camxnode
                  camxnode->camxnode: SetupRequestOutputPortFence()
                  activate camxnode
                    camxnode->camxnode: **ReleaseOutputPortCSLFences()**
                    activate camxnode
                    camxnode->camxnode: return
                    deactivate camxnode

                    camxnode->camxcsl: **CSLCreatePrivateFence()**
                    activate camxnode
                    camxcsl->camxnode: return
                    deactivate camxnode

                    camxnode->camxcsl: **CSLFenceAsycWait(hNewFence, **\n**Node::CSLFenceCallback)**
                    activate camxnode
                     note over camxcsl
                       Register a callback to CSL when a fence is signaled
                       and async wait
                       for every node, will have this process
                     end note
                    camxcsl->camxnode: return
                    deactivate camxnode

                    note over camxcsl
                        For every node, we can get fence and setup CSLFences
                        but for a HW node like jpeg, what happen?
                    end note

                  camxnode->camxnode: return
                  deactivate camxnode
                camxnode->camxnode: return
                deactivate camxnode
              end
            camxnode->camxnode: return
            deactivate camxnode

            camxnode->camxnode: <color:red>**SetupRequestInputPorts()**
            activate camxnode
              note over camxnode
              **Actually, will finally call **
              **pImageBuffer->Import()**
              <color:red>CSLMapNativeBuffer()</color>
              <color:red> what the useage of ImageBuffer??</color>
              <color:red> And Why we Map Buffer Here?</color>
              end note
            camxnode->camxnode: return
            deactivate camxnode


          camxnode->camxpipeline: return
          deactivate camxnode
        end
    camxpipeline->camxsession: return
    deactivate camxpipeline


  
  note over camxsession
    finally, will **m_pRequestQueue->Release(pSessionRequest)**
    then the requestQueue can enqueue a new one
  end note
  camxsession->camxchisession: return
  deactivate camxsession

deactivate camxchisession
end

  note left Kernel
    need to check:

    in camxchisession.cp CHISession::Initialize
      m_pThreadManager->RegisterJobFamily(ThreadJobCallback)

    in chxusecasemc.cpp  initialize
    will override the 
        callbacks.ChiNotify  =  SessionCbNotifyMessage
        callbacks.ChiProcessCaptureResult  =  SessionCbCaptureResult
  end note
end loop
== All Fence Callback will enter here ==
[o->camxnode: Node::**CSLFenceCallback**()
activate camxnode
  camxnode->ThreadManager: **PostJob()**
  activate ThreadManager
    note over ThreadManager
      This will call
      <color:red>**Session::NodeThreadJobFamilySessionCb**
    end note
  ThreadManager->camxnode: return
  deactivate ThreadManager
[o<-camxnode: return
deactivate camxnode
... ...
note left camxsession
  <color:red><size:16>**1. when the Job registered? **</size></color>
  <color:blue><size:15>**  It Rigistered in camxsession FinilizePipeline**</size></color>
  <color:blue><size:15>**  And the callback is NodeThreadJobFamilySessionCb**</size></color>
  <color:red><size:16>**2. How the handle passed to node?**</size></color>
  <color:blue><size:15>**  In camxnode, will got the m_hThreadJobFamilyHandle**</size></color>
  <color:blue><size:15>**  This is what creat in camxsession**</size></color>
  <color:red><size:16>**3. When it Called?(PostJob)**</size></color>
  <color:blue><size:15>**  In CSLFenceCallback**</size></color>
  
end note
ThreadManager->camxsession: **NodeThreadJobFamilySessionCb**
activate camxsession
  camxsession->camxnode: **NodeThreadJobFamilyCb()**
  activate camxnode
    camxnode->camxnode: **ProcessFenceCallback**
    activate camxnode
      note over camxnode
        1. fenceAction = **FenceDropActionReturnType::ACTION_NONE**
        2. run **ContingencyInducer::CheckFenceDropNeeded()**, if return ACTION_DROP
           will directly <color:red>return</color>
           if return ACTION_ERROR, **fenceResult** = **CSLFenceResultFailed**
      end note

      alt TRUE==CamxAutomicCompareExchangedU(isFenceSignaled, 0, 1)
        note over camxnode
          m_perRequestInfo[requestIdIndex].**numUnsignaledFences--**;
        end note

        camxnode->camxpipeline: **RemoveRequestFence()**
        activate camxpipeline
          note over camxpipeline
            remove the Fence Node From the LightWeightDoublyLinkedList
          end note
        camxpipeline->camxnode: return
        deactivate camxpipeline

        camxnode->camxnode: **ProcessingNodeFenceCallback()**
        activate camxnode
          note over camxnode
            This Function is virtual, currently not used
          end note
        camxnode->camxnode: return
        deactivate camxnode

        camxnode->camxnode: **WatermarkImage()**
        activate camxnode
        camxnode->camxnode: return
        deactivate camxnode

        alt **numUnsignaledFences** == 0
          camxnode->camxnode: **ProcessRequestIdDone()**
          activate camxnode
            note over camxnode
              1. **RecycleRetiredCmdBuffers()**
              2. **NotifyOutputConsumed()**
              3. **CSLReleaseFence()**
            end note

            camxnode->camxpipeline: **NotifyNodeRequestIdDone()**
            activate camxpipeline
              camxpipeline->camxsession: **NotifyProcessingDone()**
              activate camxsession
                alt **IsDoneProcessing() == TRUE**
                  note over camxsession
                    **m_pWaitAllResultsAvailable->Signal();**
                  end note
                end
              camxsession->camxpipeline: return
              deactivate camxsession
            camxnode<-camxpipeline: return
            deactivate camxpipeline
          camxnode->camxnode: return
          deactivate camxnode
        end

        loop batchIndex < numBatchedFrames
          camxnode->camxnode: **ReleaseOutputPortImageBufferReference()**
          activate camxnode
          camxnode->camxnode: return
          deactivate camxnode
        end loop

        note over camxnode
          will run:
          1. **ReleaseBufferManagerCompositeImageReference()**
          2. **NonSinkPortFenceSignaled()** or **NonSinkPortFenceSignaled**
             2.1, in **NonSinkPortFenceSignaled** ä¹ç±»çå½æ°ä¸­ï¼ä¼è°ç¨DRQ, æ£æ¥ç¸åºçdependencyæ¯å¦æ»¡è¶³
                  m_pDeferredRequestQueue->FenceSignaledCallback(phFence, requestId);
                  <color:red>**Very Important **</color>
          3. **SinkPortFenceErrorSignaled()**  or **SinkPOrtFenceSignaled**
          4. if **numUnsignaledFences == 0** will run
             - **ProcessPartialMetadataDone()**
             - **ProcessMetadataDone()**
             - **ProcessRequestIdDone()**
        end note
      end

    camxnode->camxnode: **return**
    deactivate camxnode
  camxnode->camxsession: return
  deactivate camxnode

camxsession->ThreadManager: return
deactivate camxsession

... ...
== **How Lets do a Reset happen?** ==
[->camxsession: ProcessCaptureRequest
activate camxsession
  loop While(m_livePendingRequests >= m_maxLivePendingRequests)
  end loop
[<-camxsession: return
deactivate camxsession

... ...
== **Other Question** ==
@enduml
