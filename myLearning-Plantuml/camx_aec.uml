@startuml
title <size:18>camx aec overview</size>\n     Lin Jin
/'box "camxchicomponent" #Chartreuse'/
box "camxchicomponent"
participant camxchicomponent
end box

/'box "aec wrapper" #BUSINESS'/
box "aec wrapper"
participant qcaecalgorithminterface
end box

/'box "AEC statsprocessor" #Violet'/
box "AEC statsprocessor"
participant camxcaecstatsprocessor
end box

/'box "AEC Engine" #SkyBlue'/
box "AEC Engine"
participant camxcaecengine
end box

/'box "AEC algo interf" #PaleGreen'/
box "AEC algo interf"
participant qcaecalgorithminterface as aec_algo_intf
end box

/'box "AEC core" #salmon'/
box "AEC core"
participant caeccore
end box

== <color:blue> From Chi -> AEC Wrapper </color>==
[->camxchicomponent: ProbeChiComponents
activate camxchicomponent
  camxchicomponent->camxchicomponent: GetAECAlgorithmCallback
  note left camxchicomponent
    ChiAECEntry[]   = <color:red>**"ChiAECAlgorithmEntry"**
    pAECAlgoEntry = CamX::OsUtils::LibGetAddr(handle, ChiAECEntry)
  end note
[<-camxchicomponent: return
deactivate camxchicomponent

... ...
[->qcaecalgorithminterface: ChiAECAlgorithmEntry
note left qcaecalgorithminterface
  this is the <color:red>**ChiAECAlgorithmEntry**</color> entry
  then chi can call pfnCreate to create AEC algo
  **CreateAECAlgorithm**
end note


== <color:blue> aec stats processor </color>==
[->camxcaecstatsprocessor: ExecuteProcessRequest
activate camxcaecstatsprocessor #green
  camxcaecstatsprocessor->camxcaecstatsprocessor: SetAlgoChromatix(TuningModeData)
  activate camxcaecstatsprocessor #GreenYellow
    camxcaecstatsprocessor->camxcaecengine: **HandleCommand(SetChromatix)**
  camxcaecstatsprocessor->camxcaecstatsprocessor: return
  deactivate camxcaecstatsprocessor

  camxcaecstatsprocessor->camxcaecstatsprocessor: **ReadHALAECParam**

  alt dualLEDCalibrationMode != DualLEDCalibrationDisabled
    camxcaecstatsprocessor->camxcaecengine: **HandleCommand(GetLEDCalibrationConfig)**
  end

  alt dualLEDCalibrationMode == DualLEDCalibrationDisabled
    camxcaecstatsprocessor->camxcaecengine: **HandleCommand(LoadLEDCalibrationData)**
  end

  camxcaecstatsprocessor->camxcaecstatsprocessor: **SetAlgoSetParams**
  activate camxcaecstatsprocessor #GreenYellow
    camxcaecstatsprocessor->camxcaecengine: **HandleCommand(SetPerFrameControlParam)**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **ReadStatsNodeUpdates**
  camxcaecstatsprocessor->camxcaecstatsprocessor: return
  deactivate camxcaecstatsprocessor


  camxcaecstatsprocessor->camxcaecstatsprocessor: **GetAlgoInput**
  activate camxcaecstatsprocessor #GreenYellow
    camxcaecstatsprocessor->camxcaecstatsprocessor: **SetAlgoBayerGridValue**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **SetAlgoBayerHDRBHistValue**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **SetAlgoBayerHistValue**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **GetVendorTags**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **GetChiStatsSession**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **SetDebugDataPointer**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **SetCameraInfomation**
  camxcaecstatsprocessor->camxcaecstatsprocessor: return
  deactivate camxcaecstatsprocessor

  camxcaecstatsprocessor->camxcaecstatsprocessor: **PrepareAlgorithmOutput**
  activate camxcaecstatsprocessor #GreenYellow
  camxcaecstatsprocessor->camxcaecstatsprocessor: return
  deactivate camxcaecstatsprocessor


  camxcaecstatsprocessor->camxcaecengine: <color:red>**HandleCommand(ProcessStats)**</color>
  activate camxcaecengine #GreenYellow
  camxcaecengine->camxcaecstatsprocessor: return
  deactivate camxcaecengine

  camxcaecstatsprocessor->camxcaecstatsprocessor: **UpdateTraceEvents**
  activate camxcaecstatsprocessor #GreenYellow
  camxcaecstatsprocessor->camxcaecstatsprocessor: return
  deactivate camxcaecstatsprocessor

  camxcaecstatsprocessor->camxcaecstatsprocessor: **PublishMetadata**
  activate camxcaecstatsprocessor #GreenYellow
    camxcaecstatsprocessor->camxcaecstatsprocessor: **PublishPropertyPoolFrameControl**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **PublishPropertyPoolFrameInfo**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **PublishExternalCameraMetadata**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **PublishPropertyPoolInternal**
    camxcaecstatsprocessor->camxcaecstatsprocessor: **PublishPropertyDebugData**
  camxcaecstatsprocessor->camxcaecstatsprocessor: return
  deactivate camxcaecstatsprocessor


[<-camxcaecstatsprocessor: return
deactivate camxcaecstatsprocessor


== <color:blue> aec algo handler create </color>==
== <color:blue> aec engine -> aec algo intf</color>==
camxcaecstatsprocessor->camxcaecengine: **CAECEngine::ProcessStats**
activate camxcaecengine

alt IsCaptureRequest == TRUE
  alt **IsFlashGainAvailable == TRUE**
    note left camxcaecengine
      need to skip stats processing
      during main flash event
    end note
  else
    camxcaecengine->camxcaecengine: **ProcessStatsAlgo**
    alt ControlSceneModeHdr||AEBracketMode
      camxcaecengine->camxcaecengine: ProcessStatsCaptureRequest
      activate camxcaecengine
    end
    camxcaecengine->camxcaecengine: return
    deactivate camxcaecengine
  end
else preview
  camxcaecengine->camxcaecengine: **ProcessStatsAlgo**
  activate camxcaecengine
    camxcaecengine->aec_algo_intf: AECProcess
    activate aec_algo_intf
      aec_algo_intf->caeccore: <color:red>**CAECCore::process**
      activate caeccore
      caeccore->aec_algo_intf: return
      deactivate caeccore
    aec_algo_intf->camxcaecengine: return
    deactivate aec_algo_intf

  camxcaecengine->camxcaecengine: return
  deactivate camxcaecengine
end

camxcaecengine->camxcaecstatsprocessor: return
deactivate camxcaecengine

== <color:blue>  aec algo intf -> aec algo  </color>==
caeccore<-o]: <size:15><color:red>CAECCore::process</color></size>
activate caeccore #crimson
  caeccore->caeccore: **convergenceKPI**
caeccore->o]: return
deactivate caeccore

caeccore->caeccore: **runMetering**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **runConvergence**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **runArbitration**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **runExtensionModule**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **updateParamsForDiagnostic**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **updateHistory**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **handlePreflash**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **populateOutput**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore

caeccore->caeccore: **populateMulticamInfo**
activate caeccore #crimson
caeccore->caeccore: return
deactivate caeccore
@enduml
