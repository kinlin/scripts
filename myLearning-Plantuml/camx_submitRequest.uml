/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6. 
'/

@startuml


participant chxextensioninterface

participant chxextensionmodule

participant chxusecase

box "Usecase XXX"
participant chxusecasedefault
end box
participant camxhal3module.cpp
participant camxchi
participant camxchicontext
participant camxsession
participant camxpipeline
participant camxhal3queue

== <color:blue> Callback config </color>==
[o->camxchi: ChiEntry(\nChiContextOps* pChiContextOps)
note left camxchi
    will set:
        pChiContextOps->pOpenContext               = CamX::ChiOpenContext;
        pChiContextOps->pCloseContext              = CamX::ChiCloseContext;
        pChiContextOps->pGetNumCameras             = CamX::ChiGetNumCameras;
        pChiContextOps->pGetCameraInfo             = CamX::ChiGetCameraInfo;
        pChiContextOps->pEnumerateSensorModes      = CamX::ChiEnumerateSensorModes;
        pChiContextOps->pCreatePipelineDescriptor  = CamX::ChiCreatePipelineDescriptor;
        pChiContextOps->pDestroyPipelineDescriptor = CamX::ChiDestroyPipelineDescriptor;
        pChiContextOps->pCreateSession             = CamX::ChiCreateSession;
        pChiContextOps->pDestroySession            = CamX::ChiDestroySession;
        pChiContextOps->pFlushSession              = CamX::ChiFlushSession;
        pChiContextOps->pActivatePipeline          = CamX::ChiActivatePipeline;
        pChiContextOps->pDeactivatePipeline        = CamX::ChiDeactivatePipeline;
        pChiContextOps->**pSubmitPipelineRequest**     = **CamX::ChiSubmitPipelineRequest**;
        pChiContextOps->pQueryPipelineMetadataInfo = CamX::ChiQueryPipelineMetadataInfo;
        pChiContextOps->pTagOps                    = CamX::ChiGetTagOps;
        pChiContextOps->pGetFenceOps               = CamX::ChiGetFenceOps;
        pChiContextOps->pMetadataOps               = CamX::ChiGetMetadataOps;
        pChiContextOps->pGetBufferManagerOps       = CamX::ChiGetBufferManagerOps;

    when load this:
        PCHIENTRY funcPChiEntry = 
            reinterpret_cast<PCHIENTRY>(ChxUtils::LibGetAddr(handle, "ChiEntry"));
end note

... ...
== <color:blue>get request from **HAL** </color>==
[o->chxextensioninterface: **chi_override_process_request**(\nconst camera3_device_t*,\ncamera3_capture_request_t*,\nvoid*)
activate chxextensioninterface #Chartreuse
  chxextensioninterface->chxextensionmodule: **OverrideProcessRequest()**
  activate chxextensionmodule #Green
    alt **m_aFlushInProgress == TRUE**
      chxextensionmodule->chxextensionmodule: **HandleProcessRequestErrorAllPCRs()**
      activate chxextensionmodule #GreenYellow
      chxextensionmodule->chxextensionmodule: return
      deactivate chxextensionmodule
    end
    
    alt **IsLongExposureCapture()**
      note over chxextensioninterface
        set **m_aLongExposureInProgress = TRUE**
        set **m_longExposureFrame** = **pCaptureRequest->frame_number**
      end note
    end

    chxextensionmodule->chxusecase: **ProcessCaptureRequest**(\ncamera3_capture_request_t*)
    activate chxusecase #LawnGreen
      chxusecase->chxusecase: AssignChiOverrideFrameNum(\npRequest->**frame_number**);
      activate chxusecase
        note over chxusecase
          Assign a Chi Override FrameNum to the original APP frame number
          and replace the request frame_number
          **pRequest->frame_number** = **chiOverrideFrameNum**
          **chiOverrideFrameNum** increase from **0**
          and the **chiOverrideFrameNum** is keeped in **m_lastAppRequestFrame**
        end note
      chxusecase<-chxusecase: return
      deactivate chxusecase

      chxusecase->chxusecase: <color:red>**ExecuteCaptureRequest()**</color>
      activate chxusecase
        note over chxusecase
          will run **ReplaceRequestMetaData** save origin Meta
          and **RestoreRequestMetadata** restore, after **ExecuteCaptureRequest** done
        end note

        chxusecase->chxusecasedefault: **SubmitChiRequest()**
        activate chxusecasedefault
          alt **IsPipelineActive() == FALSE**
            alt **sessionIdx == m_realTimeIdx**
              chxusecasedefault->chxextensionmodule: **ActivatePipeline()**
              activate chxextensionmodule
                chxextensionmodule->camxchicontext: **ActivatePipeline()**
                activate camxchicontext
                  camxchicontext->camxsession: <color:red>**StreamOn()**</color>
                  activate camxsession
                    note over camxsession
                      The same as below, not paint twice
                    end note
                  camxsession->camxchicontext: return
                  deactivate camxsession
                chxextensionmodule<-camxchicontext: **return**
                deactivate camxchicontext
              chxusecasedefault<-chxextensionmodule: **return**
              deactivate chxextensionmodule
            end

            chxusecasedefault->chxextensionmodule: **SubmitRequest()**
            activate chxextensionmodule
              note over chxextenionmodule
                <color:red>**Finally, still go into SubmitRequest**</color>
              end note
            chxusecasedefault<-chxextensionmodule: return
            deactivate chxextensionmodule
          end
          note over chxusecasedefault
            **Will run <color:blue>ChxUtils::AndroidMetadata::FreeMetaData</color>**
          end note
        chxusecase<-chxusecasedefault: return
        deactivate chxusecasedefault

      chxusecase<-chxusecase: return
      deactivate chxusecase

    chxextensionmodule<-chxusecase: return
    deactivate chxusecase

  chxextensioninterface->chxextensionmodule: return
  deactivate chxextensionmodule
[o<-chxextensioninterface: return
deactivate chxextensioninterface
... ...
== <color:blue>submit pipeline request Flow </color>==
[o->chxextensionmodule: ExtensionModule::SubmitRequest
note over chxextensionmodule
  <color:red>TODO: </color>
  <color:blue>both online/offline, goes here</color>
  <color:blue>The HAL request, will also change into chi request. </color>
  <color:blue>Run submitRequest</color>
end note
activate chxextensionmodule
    alt **m_aFlushInProgress** == **FALSE**
        chxextensionmodule->camxchi: **ChiSubmitPipelineRequest**()
        activate camxchi
            camxchi->camxchicontext: **SubmitRequest**
            activate camxchicontext
                camxchicontext->camxsession: **UpdateMultiRequestSyncData()**
                activate camxsession
                    note over camxsession
                        <color:red>TODO: Still not clear why we need this</color>
                        1. run when m_numInputSensors > 2
                        2. if pRequest->numRequests >= 2
                           set isMultiRequest=TRUE, need 3A sync
                    end note
                camxsession->camxchicontext: return
                deactivate camxsession

                camxchicontext->camxsession: **CheckValidInputRequest()**
                activate camxsession
                    note over camxsession
                      Check the Buffer is null
                    end note
                camxsession->camxchicontext: return
                deactivate camxsession

                alt pSession->**IsPipelineRealTime()** == FALSE
                    camxchicontext->camxsession: **StreamOn()**
                    activate camxsession
                        note over camxsession
                          <color:red>TODO:</color>
                          So this is the Offline Request. What about the realtime?
                          <color:blue>PipelineStatus:</color>
                            UNINITIALIZED
                            INITIALIZED
                            FINALIZED
                            RESOURCES_RELEASED
                            STREAM_OFF
                            RESOURCES_ACQUIRED
                            PARTIAL_STREAM_ON
                            STREAM_ON
                          <color:red>**VIP:**</color>
                          **for offline, will streamOn at submitRequest**
                          **but for online, will ActivatePipeline when <color:red>GenerateRealtimeRequest</color>**
                          **or USECASE::ExecuteCaptureRequest ? or online should always Active???**
                        end note
                        alt PipelineStatus::FINALIZED > pipelineStatus
                            camxsession->camxsession: **FinalizeDeferPipeline()**
                            activate camxsession
                              note over camxsession
                                1. **RegisterJobFamily**(**NodeThreadJobFamilySessionCb**)
                              end note
                              camxsession->camxpipeline: **FinalizeDeferPipeline()**
                              activate camxpipeline
                                note right camxpipeline
                                  1. for Every Node, run **FinalizeInitialization()**
                                  2. **DeterminBufferProperties()**
                                  3. for Every Node, run **CreateBufferManagers()**
                                  4. for Every Node, run NotifyPipelineCreated()
                                  5. set PipelineStates = **FINALIZED**
                                  6. Rigister CSL Callback   for **IsRealTime() == TRUE**
                                end note
                              camxpipeline->camxsession: return
                              deactivate camxpipeline
                            camxsession->camxsession: return
                            deactivate camxsession

                            camxsession->camxpipeline: **StreamOn()**
                            activate camxpipeline
                                note right camxpipeline
                                    1. run **CallNodeAcquireResources()**, every node will acquire resource
                                    2. if Enable the External Sensor and **IsRealTime()**
                                       will run m_pExternalSensor->Initialize() and ->StreamOn()
                                    3. run m_pChiContext->GetHwContext()->StreamOn(GetCSLSession(),
                                                                                   GetCSLLink(),
                                                                                   GetCSLDevices());
                                      This will run **CSLStreamOn()**
                                    4. Set PipelineStatus to **STREAM_ON**
                                    5. Call every node **OnNodeStreamOn()**
                                end note
                            camxpipeline->camxsession: return
                            deactivate camxpipeline
                        end
                    camxsession->camxchicontext: return
                    deactivate camxsession

                    camxchicontext->camxsession: **ProcessCaptureRequest()**
                    activate camxsession
                        alt **m_isRecoveryMode == TRUE**
                            note right camxsession
                                1. the **m_isRecoveryMode** is setted in **Session::HandleErrorCb**
                                   when case **MessageCodeRecovery**, and this is finally come from
                                   the <color:red>**CSLErrorMessageCodeRecovery**</color>, which indicate
                                   that the KMD is recovery.
                                2. will return **CamxResultETimeout**
                            end note
                        end

                        alt **m_livePendingRequests** >= **m_maxLivePendingRequests - 1**
                            note right camxsession
                                1. <color:red>m_livePendingRequests</color> means currently, we already run
                                    how many request.
                                   <color:red>m_maxLivePendingRequests</color> means we can accept Max num
                                   request
                                   if we got too many request, we have to wait (waitTime=LivePendingRequestTimeoutDefault).
                                   **m_pWaitLivePendingRequests->TimeWait(waitTime)**
                            end note
                        end

                        alt loop requestIndex < **numRequests**
                            note right camxsession
                                1. run **CanRequestProceed()**, if the callback report device err, can't process
                                   return result is FAIL
                                2. run **WaitOnAcquireFence()**, async wait max 5s, for fence
                                   if Fail return FAIL
                                3. if **hasBatchingModeChanged=TRUE**, will Empty the RequestQueue got from hal.
                                4. if every thing goes well, will **EnqueueWait(&m_captureRequest)**
                                   and PostJob(m_hJobFamilyHandle)
                                . TODO: still some not clear here.
                            end note
                        end 


                    camxsession->camxchicontext: return
                    deactivate camxsession


                end
            camxchicontext->camxchi: return
            deactivate camxchicontext
        camxchi->chxextensionmodule: return
        deactivate camxchi
    end
[o<-chxextensionmodule: return
deactivate chxextensionmodule



== <color:blue> **how chi save preview/snapshot/video stream from App?** </color>==
note left camxhal3queue
    the camxhal3queue is used to manage the Hal3Queue
    the Input Request save in a Queue
end note

@enduml
