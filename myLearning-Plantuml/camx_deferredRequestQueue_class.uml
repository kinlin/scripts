@startuml
title <size:18>camx DRQ class Arch</size>\n     Lin Jin

/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/


/'
virtual
<color:blue>**virtual**</color> <color:green>****</color>=0;

public func, not virtual, static
<color:orange>****</color> <color:green>****</color>

<color:green>****</color>
'/


package <color:blue><size:15>**DRQ_and_PropertyPoolObserver**</color></size> {
  class IPropertyPoolObserver {
      __public__
      <color:blue>**virtual**</color> <color:green>**OnPropertyUpdate**</color>=0;
      <color:blue>**virtual**</color> <color:green>**OnMetadataUpdate**</color>=0;
      <color:blue>**virtual**</color> <color:green>**OnPropertyFailure**</color>=0;
      <color:blue>**virtual**</color> <color:green>**OnMetadataFailure**</color>=0;
      <color:blue>**virtual**</color> <color:green>**LockForPublish**</color>=0;
      <color:blue>**virtual**</color> <color:green>**UnlockAfterPublish**</color>=0;
  }

  class MetadataSlot {
      __public__
      <color:orange>**static**</color> <color:green>**Create()**</color>
      <color:green>**Destroy()**</color>
      <color:green>**GetMetadataByIndex**</color>
      <color:green>**GetMetadataByTag**</color>
      <color:green>**GetPropertyBlob**</color>
      <color:green>**SetMetadataByTag**</color>
      <color:green>**GetMetadataCountByTag**</color>
      <color:green>**CopyPublishedMetadataFromTag**</color>
  }

  class MetadataPool {
      __public__
      <color:orange>**static**</color> <color:green>**Create()**</color>
      <color:green>**GetSlot()**</color>
      <color:green>**GetCurrentEarlyTagsCountForSlot()**</color>
      <color:green>**Subscribe()**</color>
      <color:green>**SubscribeAll()**</color>
      <color:green>**UnsubscribeAll()**</color>
      <color:green>**FindIndexByPropertyId()**</color>
  }


  class DeferredRequestQueue {
      __public__
      <color:orange>**static**</color> <color:green>**Create()**</color>
      void <color:green>**Destroy()**</color>
      void <color:green>**UpdateDependency()**</color>
      CamxResult <color:green>**AddDeferredNode()**</color>
      CamxResult <color:green>**WaitForFenceDependency()**</color>
      void <color:green>**FenceErrorSignaledCallback()**</color>
      void <color:green>**FenceSignaledCallback()**</color>
      void <color:green>**ChiFenceSignaledCallback()**</color>
      void <color:green>**OnPropertyUpdate()**</color>
      void <color:green>**OnMetadataUpdate()**</color>
      void <color:green>**OnPropertyFailure()**</color>
      void <color:green>**OnMetadataFailure()**</color>
      void <color:green>**LockForPublish()**</color>
      void <color:green>**UnlockAfterPublish()**</color>
      BOOL <color:green>**RequestInErrorState()**</color>
      void <color:green>**HandleFenceError()**</color>
      void <color:green>**DispatchReadyNodes()**</color>
      void <color:green>**Dump()**</color>
      void <color:green>**SetPreemptDependencyFlag()**</color>
      void <color:green>**DeferredRequestQueueFlush()**</color>

  }

  class Actuator {
  }

  class OIS {
  }

  IPropertyPoolObserver<-down-DeferredRequestQueue
  IPropertyPoolObserver<-down-Actuator
  IPropertyPoolObserver<-down-OIS

}

@enduml
