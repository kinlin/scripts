@startuml
participant camxhal3module.cpp as camxModule
participant camxusecasemanager.cpp as camxUCM
participant pipelinesetmanager.cpp as pipeM
participant pipeline.cpp as pipe
participant camxchi.cpp as camxchi

title hal3Device construct
[o->camxModule: HAL3Module::HAL3Module()

camxModule->camxUCM: UseCaseManager::Create()
camxUCM->camxUCM: UseCaseManager->Initialize()
camxUCM->camxUCM: UseCaseManager::ProcessTopologyXMLBinary()
alt linux
camxUCM->camxosutilslinux.cpp:FOpen
else win32
camxUCM->camxosutilswin32.cpp:FOpen
end
note right of camxUCM: open and read XML file

camxUCM->pipeM: NEW PipelineSetManager()
note right of pipeM: this is auto-generated code.

pipeM->pipe: new UsecaseDefinitionsClass

camxUCM->pipeM: GetModule_UsecaseDef

camxUCM->camxUCM: InitializeLinkInfo

camxUCM->camxosutilslinux.cpp:FClose

camxModule->camxchi: ChiEntry(&m_ChiContextOps)

note right of camxchi:will init pChiContextOpslist here

camxModule->camxosutilslinux.cpp:GetFilesFromPath(CHIOverrideModulePath)
note right of camxModule:search Chi Override module in folder
camxModule->camxosutilslinux.cpp:LibMap
camxModule->camxosutilslinux.cpp:LibGetAddr("chi_hal_override_entry")
camxModule->chxextensioninterface.cpp: chi_hal_override_entry
note right of chxextensioninterface.cpp:will get chi override entry
note right of chxextensioninterface.cpp:assign m_ChiAppCallbacks


@end
