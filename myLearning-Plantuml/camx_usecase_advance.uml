@startuml
participant chxadvancedcamerausecase.cpp as chxadvanceusecase
participant chxextensionmodule.cpp as chxextensionmodule

note over chxadvanceusecase
  how we choose Usecase?
  1. in chxextensionmodule.cpp, use StreamConfigMode [android + Qti self's]
  2. in chxusecaseutils.cpp, we can create usecase like
     UsecaseId::PreviewZSL
     UsecaseId::MultiCamera
     UsecaseId::MultiCameraVR
     UsecaseId::MFNR
     UsecaseId::QuadCFA
     UsecaseId::Torch
     UsecaseId::AdvancedCameraUsecase    <This need static settings advanceFeatureMask >
     below is Advance usecase
end note

==<color:red><b>Advance Usecase initialze</b></color>==
chxadvanceusecase->chxadvanceusecase: pAdvancedCameraUsecase->Initialize
activate chxadvanceusecase
chxadvanceusecase->chxextensionmodule: **GetVendorTagOps**
chxextensionmodule->chxadvanceusecase: return
alt IsMultiCameraUsecase==TRUE
  note over chxadvanceusecase
    need m_pRdiStream != NULL
  end note
else
  note over chxadvanceusecase
    **will malloc m_pRdiStream**
    <color:red><b>Does this mean for single camera, we only need m_pRdiStream?</b></color>
  end note
end

note over chxadvanceusecase
  **malloc m_pBayer2YuvStream**
  **malloc m_pJPEGInputStream**
end note

loop PipelineCount times
  note over chxadvanceusecase
  <color:red><b>Where is this PipelineCount come?</b></color>
  <b>enum AdvancedPipelineType                                      </b>
  <b>{                                                              </b>
  <b>    ZSLSnapshotJpegType = 0,        // snapshot to JPEG        </b>
  <b>    ZSLSnapshotYUVType,             // snapshot to YUV         </b>
  <b>    InternalZSLYuv2JpegType,        // YUV to JPEG             </b>
  <b>    InternalZSLYuv2JpegMFNRType,    // YUV to JPEG for MFNR    </b>
  <b>    Merge3YuvCustomTo1YuvType,      // merge 3 YUV to 1 YUV    </b>
  <b>    ZSLPreviewRawType,              // preview                 </b>
  <b>    MFNRPrefilterType,              // MFNR prefilter          </b>
  <b>    MFNRScaleType,                  // MFNR scale              </b>
  <b>    MFNRBlendType,                  // MFNR blend              </b>
  <b>    MFNRPostFilterType,             // MFNR post filter        </b>
  <b>    SWMFMergeYuvType,               // SW multi frame          </b>
  <b>    ZSLSnapshotYUVAuxType,          // Bayer to Yuv for aux    </b>
  <b>    InternalZSLYuv2JpegMFNRAuxType, // YUV to JPEG for MFNR Aux</b>
  <b>    MFNRPrefilterAuxType,           // MFNR prefilter Aux      </b>
  <b>    MFNRScaleAuxType,               // MFNR scale Aux          </b>
  <b>    MFNRBlendAuxType,               // MFNR blend Aux          </b>
  <b>    MFNRPostFilterAuxType,          // MFNR post filter Aux    </b>
  <b>    ZSLYuv2YuvType,                 // Yuv to Yuv reprocess    </b>
  <b>    ZSLSnapshotJpegGPUType,         // snapshot to GPU to JPEG </b>
  <color:red><b>    PipelineCount                   // the pipelines count     </b></color>
  <b>};                                                             </b>
  set m_pipelineToSession[i] = InvalidSessionId
  end note
end

chxadvanceusecase->chxadvanceusecase: **FeatureSetup(pStreamConfig)**
  activate chxadvanceusecase
  alt usecaseId==PreviewZSL || usecaseId==YUVInBlobOut
    note over chxadvanceusecase
      will call AdvanceFeatureMFNR/AdvanceFeatureHDR/AdvanceFeatureSWMF and so on
      <color:red><b>So if we want to know which Feature runing</b></color>
      <b>can open log for SelectFeature</b>
      <b>CHX_LOG("SelectFeatures(), enabled feature mask:%x")</b>
    end note
    chxadvanceusecase->chxadvanceusecase: SelectFeatures(pStreamConfig)
  else usecaseId==MultiCamera
    chxadvanceusecase->chxadvanceusecase: SelectFeatures(pStreamConfig)
  else usecaseId==RawJPEG
    note over chxadvanceusecase
      <b>m_pRawJPEG = FeatureRawJPEG::Create</b>
    end note
  end
  chxadvanceusecase->chxadvanceusecase: return
  deactivate chxadvanceusecase

chxadvanceusecase->chxadvanceusecase: SelectUsecaseConfig(pCameraInfo, pStreamConfig)
  activate chxadvanceusecase
  alt usecaseId==PreviewZSL/YUVInBlobOut/MultiCamera
    chxadvanceusecase->chxadvanceusecase: BuildUsecase
    note over chxadvanceusecase
      <color:red></b>What BuildUsecase Do?<b></color>
      1. set **m_pPreviewStream** and **m_pSnapshotStream** from pStreamConfig
      2. for some case, will set m_pYuvCBStream/m_pYuvInStream
      3. Select pipeline 
    end note
  else usecaseId==RawJPEG
    note over chxadvanceusecase
      m_pRawJPEG->OverrideUsecase
    end note
  else
    note over chxadvanceusecase
      UsecaseSelector::DefaultMachingUsecase
      SetPipelineToCameraMapping
    end note
  end


  chxadvanceusecase->chxadvanceusecase: return
  deactivate chxadvanceusecase

chxadvanceusecase->chxadvanceusecase: return
deactivate chxadvanceusecase

==<color:red><b>Advance Usecase create</b></color>==

@enduml
