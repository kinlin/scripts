@startuml
title <size:18>camx af overview</size>\n     Lin Jin
control AFNode #00ff00
participant camxcafstatsprocessor.cpp as camxcaf_statsp
participant camxcafioutil.cpp as camxcaf_ioutil
participant camxafinterface.cpp as camxaf_interf
participant af_core.cpp as af_core
participant af_core_input.cpp as af_core_input
participant af_process.cpp as af_process
participant af_core_output.cpp as af_core_output
participant af_debug_data.cpp as af_debug_data
participant af_util.cpp as af_util
participant af_haf.cpp as af_haf
participant camxpdlib.cpp as camxpdlib


== <color #ff0000> where sw process af </color>==
AFNode->camxcaf_statsp: **CAFStatsProcessor::ExecuteProcessRequest**
activate AFNode  
  alt skipProcessing=TRUE
    camxcaf_statsp->camxcaf_ioutil: PublishSkippedFrameOutput
  else skipProcessing=FALSE
    note over camxcaf_statsp: step1 get gyro data
    camxcaf_statsp->camxcaf_ioutil: GetLastNSamples(3)
  
    note over camxcaf_statsp: step2 get gravity data
    camxcaf_statsp->camxcaf_ioutil: PopulateGravityData
  
    note over camxcaf_statsp: step3: get output buffer hold AF algo output
    camxcaf_statsp->camxcaf_ioutil: GetAFOutputBuffers
  
    note over camxcaf_statsp: step4: begin process
    alt disableAFStatsProcessing==True||m_isFixedFocus
      camxcaf_statsp->camxcaf_statsp: OverwriteAutoFocusOutput
      camxcaf_statsp->camxcaf_ioutil: PublishOutput
    else maxPipelineDelay>=pStatsProcessRequestDataInfo->requestId
      camxcaf_statsp->camxcaf_statsp: ProcessSetParams
      activate camxcaf_statsp
        note left camxcaf_statsp
          will get data like SensorInput
          FocusMode/FocusDistance/FocusRegions
          Gyro/Gravity
          etc
        end note
        alt if multiCameraEnable==TRUE
          camxcaf_statsp->camxcaf_ioutil: GetCameraInfo
          camxcaf_statsp->camxcaf_ioutil: GetPeerInfo
        end
        camxcaf_ioutil->camxcaf_statsp:return
        camxcaf_statsp->camxaf_interf: <color:red><b>AFSetParam</b></color>
        group detail of AFSetParam
          alt **AFSetParamTypeCameraInfo case**
            note left camxaf_interf
              will set role_switch.master=TRUE/FALSE
              follow algoRole == StatsAlgoRoleMaster/StatsAlgoRoleDefault
            end note
            [->camxaf_interf: case AFSetParamTypeCameraInfo
            camxaf_interf->af_core: af_core_set_param(AF_CORE_SET_ROLE_SWITCH)
            af_core->af_haf: af_haf_set_param
            group detail of af_haf_set_param
              note over af_haf
                <color:red>here the main flow almost the same will old code</color>
                1st: will call HAFSetParamPackageSingle(HAFSetParamRoleSwitch)
                2nd: call pAlgo->set_parameters()
                3rd: call af_default_mixer_set_parameters(AF_HAF_SET_PARAM_ROLE_SWITCH)
                4th: change the pMixer->p_primary = pMixer->p_follower_algo
                which means will run follower algo for slave
                <color:red>from af_haf_follower.cpp, there're three stategy</color>
                <color:blue>AF_FOLLOWER_COARSE_FOLLOW</color>
                <color:blue>AF_FOLLOWER_COMPLETE_FOLLOW</color>
                <color:blue>AF_FOLLOWER_SEQUENTIAL_FOLLOW</color>
              end note
            end
            af_core->af_haf: **af_haf_handle_role_switch**
            alt role_switch.master==FALSE
              af_haf->af_haf: af_haf_event_clear_algo_data
            else role_switch.master==TRUE
              af_haf->af_haf: af_haf_set_to_converge
            end
  
          else **AFSetParamPeerInfo case**
          else **AFSetParamTypeBGStats**
          end
        end
        camxcaf_statsp->camxcaf_statsp: return
      deactivate camxcaf_statsp
      camxcaf_statsp->camxcaf_ioutil: CopyInputSettings
      camxcaf_statsp->camxcaf_ioutil: PublishExternalCameraMetadata
      camxcaf_statsp->camxcaf_ioutil: PublishDefaultOutput
    else
      camxcaf_statsp->camxcaf_statsp: UpdateAFSettings
      camxcaf_statsp->camxcaf_ioutil: ReadDualCameraInfo
      alt m_isPDAFEnable==TRUE
        camxcaf_statsp->camxcaf_ioutil: ParsePDStats
        group **ParsePDStats detail**
          camxcaf_ioutil->camxcaf_ioutil: PopulatePDInputData
          camxcaf_ioutil->camxpdlib: PDLibProcess
          camxcaf_ioutil->camxcaf_ioutil: PublishPDLibOutput
        end
      end
      alt BAFStatsDependencyMe== pStatsProcessRequestDataInfo->processSequenceId
        camxcaf_statsp->camxcaf_ioutil: ParseISPStats
        camxcaf_statsp->camxcaf_ioutil: UpdataChiStatsSession
        camxcaf_statsp->camxaf_interf: m_pAFAlgorithm->AFProcess
  
        group <color #ff0000>AFProcess detail</color>
          camxaf_interf->camxaf_interf: TranslateToAFCoreInput
          camxaf_interf->af_core: af_core_process
  
          group <color #ff0000>af_core_process detail</color>
            af_core->af_core_input: af_map_input_params
            af_core->af_process: <color #ff0000> af_process_frame </color>
  
              group <color #ff0000>af_process_frame detail</color>
                note over af_process: Process AF stats
                note over af_process: stats_id = stats->bayer_stats.frame_id ?? <color #ff0000>frame_id come from ISP? </color>
  
                alt **af_mode.mode==AF_MODE_MANUAL**
                  af_process->af_util: af_util_do_manual_focus
                end
  
                alt **enable_init_pos && IS_CAF_ENABLED**
                 af_process->af_util: af_util_move_lens_to
                end
  
                af_process->af_util: af_util_move_lens
  
                alt **if af_lock==TRUE || af_state==AF_INACTIVE**
                  note over af_process: return **TRUE**
                end
  
                af_process->af_process: **af_process_parse_stats**
                group <color #ff0000>af_process_parse_stats detail</color>
                  group **if bayer_stats->bf_type == AF_CORE_BF_FW**
                      alt if MultiWindow Mode
                          af_process->af_process: **af_process_parse_bayer_fw_stats_mw**
                      else
                          af_process->af_process: **af_process_parse_bayer_fw_stats**
                          note over af_process: get fv value
                      end
                  end
                end
  
                group af->frame_delay>0
                  note over af_process: af->frame_delay--; return TRUE;
                end
  
                af_process->af_process: af_process_update_fv_fistory
                
                group low_light ??
                af_process->af_util: af_util_is_low_light
                end
  
                af_process->af_haf: <color #ff0000>af_haf_process</color>
                activate af_haf #LawnGreen
                  group af_haf_process detail
                    af_haf->af_haf: af_haf_set_fv_stats
                    af_haf->af_haf: af_haf_set_mode
                    af_haf->af_haf: af_haf_spd_detect
                    af_haf->af_haf: af_haf_preprocess_data_broadcast
                    note over af_haf: process roi update
                    af_haf->af_haf: af_haf_monitor
                    af_haf->af_haf: af_haf_status_manager_run
                  end
                af_haf->af_process: return
                deactivate af_haf

                af_process->af_util: af_util_adjust_roi
                alt role_switch.master==<color:red>**true**</color>
                  af_process->af_util: af_util_update_peer_focus_info
                end
  
              end
  
            af_core->af_core_output: af_map_output_params
            af_core->af_debug_data: af_debug_data_output
          end
  
        end
  
        camxcaf_statsp->camxcaf_statsp: **BuildHALOutput**
        group detail of BuildHALOutput
        camxcaf_statsp->camxcaf_statsp: **UpdateControlAFState**
        camxcaf_statsp->camxcaf_statsp: **UpdateFocusMode**
        camxcaf_statsp->camxcaf_statsp: **UpdateCotrolLensState**
        camxcaf_statsp->camxcaf_statsp: **UpdateControlLensDistance**
        camxcaf_statsp->camxcaf_statsp: **UpdateFocusValue**
        end
  
        alt multiCameraEnable==TRUE
          note over camxcaf_statsp: MultiCamera process
          camxcaf_statsp->camxcaf_statsp: **ProcessUpdatePeerFocusInfo**
          activate camxcaf_statsp
  
          camxcaf_statsp->camxaf_interf: AFGetParam
  
              alt case AFGetParamInfoForPeer
                  camxaf_interf->af_core: af_core_get_param
              end
              af_core->camxaf_interf: return
              camxaf_interf->camxcaf_statsp: return
          camxcaf_statsp->camxcaf_ioutil: CAFIOUtil::PublishPeerFocusInfo
          camxcaf_ioutil->camxcaf_statsp: return **CamxResultSuccess**
          camxcaf_statsp->camxcaf_statsp: return
          deactivate camxcaf_statsp
  
        end
  
        camxcaf_statsp->camxcaf_ioutil: PublishOutput
        activate camxcaf_ioutil
          camxcaf_ioutil->camxcaf_ioutil: PublishFrameControl
          camxcaf_ioutil->camxcaf_ioutil: PublishStatsControl
          camxcaf_ioutil->camxcaf_ioutil: PublishFrameInfo
          camxcaf_ioutil->camxcaf_ioutil: PublishExternalCameraMetadata
          activate camxcaf_ioutil
            camxcaf_ioutil->camxcaf_ioutil: **PublishHALMetadata**
            camxcaf_ioutil->camxcaf_ioutil: **PublishVendorTagMetadata**
            note over camxcaf_ioutil: **seperate HAL and Vendor data**
          deactivate camxcaf_ioutil
          camxcaf_ioutil->camxcaf_ioutil: PublishPropertyDebugData
          camxcaf_ioutil->camxcaf_statsp: return
        deactivate camxcaf_ioutil


      end

  camxcaf_statsp->AFNode: return
deactivate AFNode

AFNode->AFNode: NotifyJobProcessRequestDone
activate AFNode
AFNode->AFNode: ProcessMetadataDone
note right AFNode
  ProcessMetaDataDone means the metadata for
  this requestId has been completely handled
end note
AFNode->AFNode: ProcessRequestIdDone
note right AFNode
  ProcessRequestIdDone means the requestId
  has been completely handled ( all output
  data generated )
end note
AFNode->AFNode: return
deactivate AFNode

end
@enduml
