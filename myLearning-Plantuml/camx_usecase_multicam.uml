@startuml
participant camxsession.cpp as camxsession
participant Chi
participant chxusecasemc.cpp as chx_usecasemc
participant camxpipeline.cpp as camx_pipeline
participant chxsession.cpp as chx_session
participant chxextensionmodule.cpp as chx_extmod
participant camxchi.cpp as camx_chi
participant camxchicontext.cpp as camx_chicontext
participant camxchisession.cpp as camx_chisession
participant camxthreadmanager.cpp as camx_threadmanager
participant camxsession.cpp as camx_session
participant camxmetadatapool.cpp as camx_mpool
participant camxhwfactory.cpp as camx_hwfactory
participant camxtitan17xfactory.cpp as camx_titanfactory

note over camxsession
  Session operation contain:
  Initialize
  StreamOn
  StreamOff
  ProcessCaptureRequest
  ProcessResults
  HandleAsyncCb
  HandleSOFCb
  HandleBufferCb
  ...
end note

==<color:red><b>MultiCamera Usecase initialze</b></color>==
note over chx_usecasemc
    Call Sequence before Initialize
    **UsecaseFactory::CreateUsecaseObject**
        -->**switch (usecaseId)**
            UsecaseId::PreviewZSL 
            UsecaseId::VideoLiveShot
                -->AdvancedCameraUsecase::Create()
            UsecaseId::MultiCamera
                --><color:red>**UsecaseMultiCamera::Create**</color>
            UsecaseId::QuadCFA
                -->UsecaseQuadCFA::Create
            UsecaseId::Torch
                -->UsecaseTorch::Create
            UsecaseId::SuperSlowMotionFRC
                -->UsecaseSuperSlowMotionFRC::Create
end note
[o->chx_usecasemc: UsecaseMultiCamera::Initialize
activate chx_usecasemc
    chx_usecasemc->chx_usecasemc: InitializeDeferResource
    activate chx_usecasemc
      note over chx_usecasemc
        create some Mutex and Condition
        set m_deferSnapSessionThreadData
        for DUAL CAMERA Session: have
        <color:red>**REALTIME_SESSION**</color>
        <color:red>**OFFLINE_PREVIEW_SESSION**</color>
        <color:red>**OFFLINE_RDI_SESSION_MAIN**</color>
        <color:red>**OFFLINE_RDI_SESSION_AUX**</color>
        <color:red>**OFFLINE_JPEG_SESSION**</color>
        <color:red>**OFFLINE_SNAPSHOT_FUSSION_SESSION**</color>
        <color:red>**OFFLINE_RAW16_SESSION**</color>
      end note
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc

    alt if cameraType==**LogicalCameraTypeDualSAT**
      note over chx_usecasemc
        **pChiUsecase=&*Usecases14Target[UsecaseSATId]**
      end note
    else
      note over chx_usecasemc
        **pChiUsecase=&*Usecases10Target[UsecaseRTBId]**
      end note
    end
    
    chx_usecasemc->chx_usecasemc: **ClassifyTargetStream**
    activate chx_usecasemc
      note over chx_usecasemc
        1. 将request中的m_pTargetPreviewStream/VideoStream/SnapshotStream
        包装成CHIBufferManagerCreateData previewData/
      end note
    chx_usecase->chx_usecasemc: return
    deactivate chx_usecasemc

    chx_usecasemc->chx_usecasemc: **SelectUsecaseXML**
    activate chx_usecasemc
    chx_usecase->chx_usecasemc: return
    deactivate chx_usecasemc


/'    loop MAX_REALTIME_PIPELINE 2                                                         '/
/'      note over chx_usecasemc                                                            '/
/'        Calloc m_pRTBPreviewStream/m_pRTPreviewStream/m_pDummyStream                     '/
/'        m_pRTBSnapshotStream/m_pRTYUVStream/m_pJPEGStream                                '/
/'                                                                                         '/
/'        并创建_rdiBufferCreateData(如多少个rdibuffer), fdBufferCreateData                '/
/'        rdi16BufferCreateData,m_fusionBufferCreateData,yuvSnapBufferCreateData           '/
/'                                                                                         '/
/'      end note                                                                           '/
/'    end                                                                                  '/
/'    chx_usecasemc->chx_usecasemc: **FillPipelineCreateData**                              '/
/'    activate chx_usecasemc                                                                '/
/'    chx_usecasemc->chx_usecasemc: return                                                  '/
/'    deactivate chx_usecasemc                                                              '/

    chx_usecasemc->chx_usecasemc: **CreateMultiCameraResource()**
    activate chx_usecasemc
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc

    chx_usecasemc->chx_usecasemc: **CreatePipeline**
    activate chx_usecasemc
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc

    alt canEnableAdvanceFeature() now this condition is return (NULL==m_pTargetVideoStream)
      chx_usecasemc->chx_usecasemc: **InitializeAdvanceFeatures**
      activate chx_usecasemc
        note over chx_usecasemc
          Call AdvancedCameraUsecase::Initialize
        end note
      chx_usecasemc->chx_usecasemc: return
      deactivate chx_usecasemc
    end

    chx_usecasemc->chx_usecasemc: **CreateSession(**\n **REALTIME_SESSION);**
    activate chx_usecasemc
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc

    chx_usecasemc->chx_usecasemc: **StartDeferThread**
    activate chx_usecasemc
      note over chx_usecasemc
        创建线程处理拍照, 该线程将调用CeateOfflineSession
        创建offlineSession,以及创建CHIBufferManager，RDI16以及FusionBufferManager
        <color:red>ThreadCreate(</color>
        <color:red>UsecaseMultiCamera::DeferSnapSessionThread);</color>
      end note
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc

    chx_usecasemc->chx_usecasemc: **CreateMultiController**
    activate chx_usecasemc
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc

    chx_usecasemc->chx_usecasemc: **CreateOfflineProcessResource**
    activate chx_usecasemc
      note over chx_usecasemc
        Create a Thread, and the <color:red>**OfflineRequestThread**</color>
        will in a loop that will handle Buffer
      end note
    chx_usecasemc->chx_usecasemc: return
    deactivate chx_usecasemc
[o<-chx_usecasemc: return
deactivate chx_usecasemc

==<color:red><b>MultiCamera Usecase create</b></color>==
Chi->chx_usecasemc: UsecaseMultiCamera::Create
activate chx_usecasemc

chx_usecasemc->chx_usecasemc: CHX_NEW UsecaseMultiCamera
chx_usecasemc->chx_usecasemc: UsecaseMultiCamera::Initialize
activate chx_usecasemc

chx_usecasemc->chx_usecasemc: InitializeDeferResource
note left chx_usecasemc
  <color:red><b>Step1: parse every stream get </b></color>
  type/format/width/height/usage Info
end note

note left chx_usecasemc
  <color:red><b>Step2: Configure REALTIME_PIPELINE</b></color>
  fill config data, and run
  BufferManager::Create...
end note
note left chx_usecasemc
  <color:red><b>Step3: Create Pipeline </b></color>
  follow pChiUsecase->numPipelines
end note
chx_usecasemc->chx_usecasemc: UsecaseMultiCamera::FillPipelineCreateData
  note left chx_usecasemc
    pipeline Index:
       REALTIMEPIPELINEMAIN   = 0;  //Main sesnor realtime pipeline
       REALTIMEPIPELINEAUX    = 1;  //Aux sensor realtime pipeline
       OFFLINEPREVIEWPIPELINE = 2;  //Offline Preview pipeline
       OFFLINEYUVPIPELINE     = 3;  //Offline RDI -> YUV pipeline for Main sensor
       OFFLINEYUVPIPELINEAUX  = 4;  //Offline RDI -> YUV pipeline for Aux sensor
       OFFLINEJPEGPIPELINE    = 5;  //Offline JPEG pipeline
       OFFLINEFUSIONPIPELINE  = 6;  //Offline Snapshot fusion pipeline
       OFFLINERAW16PIPELINE   = 7;  //Offline RAW16 pipeline
  end note
chx_usecasemc->chx_usecasemc: CreatePipeline
chx_usecasemc->camx_pipeline: Pipeline::Create(cameraID)
activate camx_pipeline #ffbbbb
  note left camx_pipeline
  Create lock and condition
  Mutex PipelineConfigDoneLock
  Condition PipelineWaitForConfigDone
  end note
  camx_pipeline->camx_mpool: MetadataPool::Create
  alt TRUE==isRealTime
  camx_pipeline->camx_pipeline:Pipeline::PublishOutputDimensions
  end
  camx_pipeline->camx_pipeline: SetNumBatchedFrames
  note left camx_pipeline
  <color:red><b>What numBatchedFrames/maxFPSValue mean?</b></color>
  end note
  camx_pipeline->camx_pipeline: <color:red><b>Pipeline::CreateNodes</b></color>
    note left camx_pipeline
    <color:green><b>Useful Log</b></color>
    "Topology: Creating Pipeline, numNodes %d isSensorInput %d isRealTime %d"
    end note
    activate camx_pipeline #CornflowerBlue
    loop pPipelineInfo->numNodes
      note left camx_pipeline
        create different Algo Callbacks for differnt case
        pAFAlgoCallbacks = &pExternalComponentInfo[index].AFAlgoCallbacks
        pAECAlgoCallbacks = &pExternalComponentInfo[index].AECAlgoCallbacks
        pAWBAlgoCallbacks = &pExternalComponentInfo[index].AWBAlgoCallbacks
        pAFDAlgoCallbacks = &pExternalComponentInfo[index].AFDAlgoCallbacks
        pASDAlgoCallbacks = &pExternalComponentInfo[index].ASDAlgoCallbacks
        pPDLibCallbacks = &pExternalComponentInfo[index].PDLibCallbacks
      end note
      camx_pipeline->camx_hwfactory: pFactory->CreateNode
      camx_hwfactory->camx_titanfactory: Titan17xFactory::HwCreateNode
      activate camx_titanfactory #ffbbbb
        alt pCreateInputData->pNodeInfo->nodeId == AutoFocus
          camx_titanfactory->o]: **AutoFocusNode::Create**
        else case BPS
          camx_titanfactory->o]: **BPSNode::Create**
        else case IFE
          camx_titanfactory->o]: **IFENode::Create**
        else case IPE
          camx_titanfactory->o]: **IPENode::Create**
        else case Sensor
          camx_titanfactory->o]: **SensorNode::Create**
        else case StatsProcessing
          camx_titanfactory->o]: **StatsProcessingNode::Create**
        else case JPEG
          camx_titanfactory->o]: **JPEGEncNode::Create**
        else case JPEGAggregator
          camx_titanfactory->o]: **JPEGAggrNode::Create**
        else case StatsParse
          camx_titanfactory->o]: **StatsParseNode::Create**
        else case ChiExternalNode
          camx_titanfactory->o]: **ChiNodeWrapper::Create**
        else case FDHw
          camx_titanfactory->o]: **FDHwNode::Create**
        else case FDManager
          camx_titanfactory->o]: **FDManagerNode::Create**
        else case OfflineStats
          camx_titanfactory->o]: **OfflineStatsNode::Create**
        else case Torch
          camx_titanfactory->o]: **TorchNode::Create**
        else case LRME
          camx_titanfactory->o]: **LRMENode::Create**
        else case RANSAC
          camx_titanfactory->o]: **RANSACNode::Create**
        end
        camx_titanfactory->camx_hwfactory: return
      deactivate camx_titanfactory
    end loop
    camx_pipeline->]: pNode->Initialize
    note left camx_pipeline: Initialize Node
    camx_pipeline->camx_pipeline: return
    deactivate camx_pipeline



deactivate camx_pipeline
chx_usecasemc<-camx_pipeline: return

== <color:blue> Create Session </color>==
note left chx_usecasemc
  <color:red><b>Step4:Create Session</b></color>
   if pipeline Create Success,
end note

chx_usecasemc->chx_session: Session::Create
activate chx_session
chx_session->chx_session: pSession->Initialize
chx_session->chx_extmod: CreateSession
chx_extmod->camx_chi: ChiCreateSession
camx_chi->camx_chicontext: ChiContext::CreateSession
camx_chicontext->camx_chisession: CHISession::Create
camx_chisession->camx_chisession: CHISession::Initialize

camx_chisession->camx_session: Session::Initialize
note left camx_session
  Session::Initialize
end note
activate camx_session
  loop numPipelines
    alt isInputSensor==FALSE  offline Pipeline
      note left camx_session
        CAMX_NEW ChiStreamWrapper
        SetChiStreamInfo
        SetPipelineDescriptorInputStream
      end note
    else isInputSensor==TRUE
      note left camx_session
         // Extra HAL request is needed
         // 1. when effective frame rate is 60FPS or more.
         // 2. when batch size is 8 or moe
            requireExtraHalRequest = TRUE;

      end note
    end
  end
  
  note left camx_session
    1. MetadataPool::Create(PoolType::PerFrameDebugData
    2. DeferredRequestQueue::Create(&pDeferredCreateData)
    3. if **requireExtraHalRequest==TRUE**: **additionalNeededRequests += 1;**
    4. **HAL3Queue**::Create(m_requestQueueDepth)
  end note
camx_session->camx_chisession: return
deactivate camx_session

camx_chisession->camx_threadmanager: RegisterJobFamily
deactivate chx_session
deactivate chx_usecasemc




@enduml
