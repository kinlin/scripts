/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6. 
'/

@startuml
class IAECXControl{
+ IAECXControl()
+ ~IAECXControl()
+ virtual setInput()
+ virtual process()
+ virtual getData
}

class AECXControl{
+ CreateInstance(IAECXControl**)
+ CAECXControl(StatsTuningData&, constAECAlgoCreateParamList&)
+ ~CAECControl()
+ virtual setInput()
+ virtual process(const AECAlgoInputList*, AECAlgoOutputList*)
+ virtual getData(AECAlgoGetParam*)
+ virtual locdAECXCoreAlog(StatsTuningData&, IAECXDebugData&, const AECAlgoCreateParamList&, IAECXCoreAlgo&)
..private..
- CAECXControl(const CAECXcontrol& rOther) = delete;
- CAECXControl& operator=(const CAECXControl& rOther) = delete;
- QueryFlashCurrent()
- runStartOfFrame()
- runEndOfFrame()
- AdjustPreflashMetering()
- RunUtils()
- runMetering()
- runConvergence()
- runExtension()
- PrepareArbitrationContext()
- controlPrecisionFlashArbitration()
- QueryControlSnapshotExposure()
- QueryControlStartExposure()
- MapResultToCamX()
- ControlSetParam()
- Check3HDRSnapshotStatus()
- ProcessFaceROIs()
- ProcessTrackerROIs()
- SetControlOpMode()
- ControlSnapshotMetering()
- aecxdbsnapshot::SnapshotTuningType const* GetSnapshotPreference()
- DestroyInstance()
- InitializeFrameSkip()
- PopulateControlOutput()
- CopyFrameInfo()
- CopyFrameControl()
- CopyExpInfo()
- CalculateExifInfo()
- ParseVendorTagInfo()
- PrepareDebugData()
- IsSensor3HDR()
- UtilParseProcessInput()
- UtilSetProcessInput()
- UtilGetOutput()
- UpdateDynamicEVLockTuning()
- LockMeteringForEV()
- GetControlStartupExposure()
- CapWarmStartupRange()
- GetStartupExpTuning()
- GetStartUpExposureFromCore()
- UpdateSettleBasedOnExtInput()
- PrintFrameControl()
- IAECXCoreAlgo* m_pCore
- IAECXControlUtil* m_pCtrlUtils
- CAECXControlPreprocess*      m_pStatsProcessor
- ROIPriority                 m_faceROIPriority
- CAECXControlArbitration*    m_pArbitrator
- CProfileAECX                m_profile
- CAECXDebugData              m_debugData
}

class struct_IAECXCoreAlgo{
+ (*runStartOfFrame)(IAECXCoreAlgo*, UINT64 frameID)
+ (*runMeteringPreprocess)(IAECXCoreAlgo*, AECXMeteringInput&, AECXMeteringOutput&)
+ (*runAnalyzer)(IAECXCoreAlgo*, UINT32, AECXAnalyzerOutput&)
+ (*updateAnalyzerMgrOut)(IAECXCoreAlgo*, UINT32, AECXAnalyzerOutput* )
+ (*runMeteringPostprocess)(IAECXCoreAlgo*, AECXMeteringInput&, AECXMeteringOutput&)
+ (*mixMetering)(IAECXCoreAlgo*,  AECXMeteringOutput&)
+ (*runExtension)(IAECXCoreAlgo*, AECXExtensionInput&, AECXExtensionOutput&)
+ (*runEndOfFrame)(IAECXCoreAlgo*, AECXFrameInfo&, AECXPostProcessingInput&,  AECXMeteringOutput&,  AECXConvergenceOutput&, AECXArbitrationOutput*)
+ (*followMasterConvExposure)(IAECXCoreAlgo*, AECXConvergenceOutput&)
+ (*getBankData)(IAECXCoreAlgo*, AECXGetBankData*)
+ (*setInput)(IAECXCoreAlgo*, AECXSetInput*)
+ (*setStats)(IAECXCoreAlgo*, AECXStatsList&)
+ (*setBankData)(IAECXCoreAlgo*, AECXSetBankData const*)
+ (*GetFlashMaxCurrent)(IAECXCoreAlgo*)
+ (*getFlashCurrent)(IAECXCoreAlgo*)
+ (*isPreflashMeteringNeeded)(IAECXCoreAlgo*)
+ (*GetStartUpExposure)(IAECXCoreAlgo*, AECXAlgoStartExposureInfo*)
+ (*queryMetaData)(IAECXCoreAlgo*, AECAlgoGetParam*)
+ (*runArbitration)()
+ (*RunConvProcess)()
+ (*RunConvSettle)()
+ (*RunConvPostProcess)()
+ (*HandleExposureConstraints)()
+ (*DestroyInstance)()
+ (*setDynamicBankData)()
+ (*GetContextStatus)()
+ (*run1DVectorProcess)()
+ (*SetMeteringLock)()
+ (*RebaseSCD)()
+ (*GetSCDOutput)()
}

class IAECXControlUtil{
+ explicit IAECXControlUtil
+ virtual ~IAECXControlUtil
+ virtual Process
+ virtual SetInput
+ inline GetStatus
+ virtual GetConfig
+ virtual SetOperationMode
+ virtual GetStartUpExposure
+ virtual GetFlashMeasurementCurrents
+ virtual GetFlashMeasurementStatus
}

class CAECXControlPreprocess{
+ CAECXControlPreprocess
+ ~CAECXControlPreprocess
+ DumpStats
+ GetHWConfigOutput
+ BackupFlashStats
- HandleStats
- ConfigureHWStats
- ConfigureCoreStats
- ConfigureFlashBackup
- SetHWStats
- TranslateIHistStats
- ConfigureCoreFlashBackup
- CreateCoreStatsInstance

}

class ROIPriority{
+ ROIPriority
+ virtual ~ROIPriority
+ virtual Clear
+ GetStore
+ GetDominantIndex
+ GetDominantID
+ IsDominantIDChange
+ UpdateROIData
+ UpdateReferenceROI
+ SetTuningData
­GetDominantScore
- ROIDominantScore
- DominantROISelection
}

class CAECXControlArbitration{
+ CAECXControlArbitration
+ ~CAECXControlArbitration
+ inline RunControlArbitration
+ IsSameArbitration
+ GetExposureLimits
+ GetMinExposureForATB
+ SetCustomeExposureTable
- RunControlArbitration
- ArbitrationOneExposuerType
- GetTuningOrder
- InitializeInput
- ApplyControlSensor
- ApplyControlTableRange
- ApplyControlTable
- ApplyControlRange
- ApplyControlLUT
- ApplyControlEV
- ApplyControlFPS
- ApplyControlManualISO
- ApplyControlManualGain
- ApplyControlManualTime
- ApplyControlManualFull
- ApplyControlManualGeneric
- ApplyControlFlicker
- ApplyControlFlickerMaxTime
- ApplyControlOtherTimeRange
- ApplyControlMasterTime
- ApplyControlTimeAsMaxRange
- SetCoreRange
- SetCoreLUT
- SetCoreTable
- GetMinExposureFromExpTime
}

class CAECXFrameSkipControl{
+ CAECXFrameSkipControl
+ ~CAECXFrameSkipControl
+ ResetFrameSkipCount
+ ConfigureFrameSkipControl
+ CheckIfSkipFrame
- CheckTuningChange
- ResetTriggerSystemFromTuning
- inline loadTuning
- CAECXTriggerDataXML
}

class struct_CAECTriggerDataXML{
+ (*SetData)()
+ (*GetData)()
+ (*DestroyInstance)()
}

class CAECXDebugData{
+ AddDebugData
+ SetDebugDataEnable
+ GetDebugData
+ IsDebugDataEnabled
+ GetSnapDebugData
- Reset
- PopulateTypeDefinitionTag
- GetSizeOfType
- AddTypeDefinitionTags
- PopulateOldTypeDefinitionTag
- PopulateAECXTypeDefinitionTag
- PopulateConfigTag
- PopulateMeteringTag
- PopulateConvergenceTag
- PopulateArbitrationTag
- PopulateOneArbitrationTag
- PopulateExtensionTag
- PopulateFlashTag
- PopulateGridStatsTag
- PopulateHistStatsTag
}

class DebugDataWriter{
+ SetBufferPointer
+ IsSameBufferPointer
+ GetSizeWritten
+ GetSize
+ IsCustomType
+ AddTypeDefinitionTag
+ virtual PopulateTypeDefinitionTag
+ AddTypeDefinitionTags
+ AddDataTag
+ AddTwoDimArrayDataTag
+ FillTuningMetadataHeader
- AddTypedefFieldArray
- AddTypedefField2DArray
- AddTypedefField
- GetSizeOfType
- GetSizeOfBuiltInType
- GetCurBufferPos
- SealUnusedSpace
}

class IAECXDebugData{
+ ~IAECXDebugData
+ virtual inline GetDebugData
+ virtual inline IsDebugDataEnabled
}

class CProfileAECX{
maybe use for AEC profile
}

IAECXControl<|--AECXControl: derive
AECXControl*--struct_IAECXCoreAlgo: contains
AECXControl*--IAECXControlUtil: contains
AECXControl*--CAECXControlPreprocess: contains
AECXControl*-- ROIPriority: contains
AECXControl*--CAECXControlArbitration: contains
AECXControl*--CAECXFrameSkipControl: contains
CAECXFrameSkipControl*--struct_CAECTriggerDataXML
AECXControl*--CAECXDebugData: contains
DebugDataWriter<|--CAECXDebugData: derive
IAECXDebugData<|--CAECXDebugData: derive

AECXControl*--CProfileAECX: contains

newpage

class IAECXCore{
}

class CAECXCore{
+ setInput
+ setBankData
+ setDynamicBankData
+ getBankData
+ SetContextEvent
+ GetContextEvent
+ GetContextStatus
+ setStats
+ runStartOfFrame
+ runMeteringPreprocess
+ runMeteringPostprocess
+ runAnalyzer
+ updateAnalyzerMgrOut
+ RunConvProcess
+ HandleExposureConstraints
+ RunConvSettle
+ RunConvPostProcess
+ runArbitration
+ runExtension
+ getFlashCurrent
+ isPreflashMeteringNeeded
+ runEndOfFrame
+ queryMetaData
+ mixMetering
+ followMasterConvExposure
+ GetStartUpExposure
+ GetFlashMaxCurrent
+ GetFlashCalibInfo
+ RebaseSCD
+ GetSCDOutput
+ run1DVectorProcess
+ SetMeteringLock
-QuerySnapshotExposure
-UpdateConvTriggers
-UpdateArbTriggers
-SetDefaultTriggers
-PopulateFrameHistoryDebugData
-PopulateStatsDebugData
-PopulateStatsChannelDebugData
-CAECXContextManager
-CAECXMetering*
-CAECXConvergence*
-CAECXArbitration*
-CAECXExtension*
-CAECXStatsProcessor*
-CAECXMtrTableGen*
-CSCDManager*
-CAECXExtMapManager*
-CAECX1DVectorManager*
-AECFrameHistory
}

class CAECXContextManager{
}

class CAECXMetering{
}

class CAECXConvergence{
}

class CAECXArbitration{
}

class CAECXExtension{
}

class CAECXStatsProcessor{
}

class CAECXMtrTableGen{
}

class CSCDManager{
}

class CAECXExtMapManager{
}

class CAECX1DVectorManager{
}

CAECXCore *-- CAECXContextManager: contain
CAECXCore *-- CAECXMetering: contain
CAECXCore *-- CAECXConvergence: contain
CAECXCore *-- CAECXArbitration: contain
CAECXCore *-- CAECXExtension: contain
CAECXCore *-- CAECXStatsProcessor: contain
CAECXCore *-- CAECXMtrTableGen: contain
CAECXCore *-- CSCDManager: contain
CAECXCore *-- CAECXExtMapManager: contain
CAECXCore *-- CAECX1DVectorManager: contain

@enduml
