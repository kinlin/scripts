/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6. 


class Dummy {
 -field1                     -------private
 #field2                     -------protected
 ~method1()                  -------package private
 +method2()                  -------public
}
'/
participant Other_Modules << (U,#ADD1B2) >>
participant camxncsservice
participant camxtofsensorintf
participant camxncsprovider
@startuml
== <color:blue> How Tof is Link to NCSService </color>==
[o-> camxncsservice: **NCSService::Initialize**
activate camxncsservice
    alt **NCSIntfType == ASM**
        note over camxncsservice
            1. Use ASM as sample
            2. Still Use camxtofsensorintf name
        end note
        camxncsservice->camxtofsensorintf: **GetInstance()**
        activate camxtofsensorintf
            note right camxncsservice
                got pNCSIntfObject and then call the INCSIntfBase public API
            end note
        camxtofsensorintf->camxncsservice:
        deactivate camxtofsensorintf

        camxncsservice->camxtofsensorintf: **ListSensors()**
        activate camxtofsensorintf
        camxtofsensorintf->camxncsservice:
        deactivate camxtofsensorintf

        camxncsservice->camxtofsensorintf: **QueryCapabilites()**
        activate camxtofsensorintf
        camxtofsensorintf->camxncsservice:
        deactivate camxtofsensorintf

        camxncsservice->camxtofsensorintf: **GetCaps()**
        activate camxtofsensorintf
        camxtofsensorintf->camxncsservice:
        deactivate camxtofsensorintf

        camxncsservice->camxncsservice: **RegisterProvider()**
        activate camxncsservice
        camxncsservice->camxncsservice:
        deactivate camxncsservice
    end
[<- camxncsservice:
deactivate camxncsservice
... ...
== <color:blue> How Other Module call TOF through NCS </color>==
Other_Modules->camxncsservice: **m_pNCSServiceObject->RegisterService(NCSIntfType)**
activate camxncsservice
    note over camxncsservice
        1. Then Modules can call the GetLastNSamples() fetch data
        2. ReconfigureSensor()    etc..
    end note
camxncsservice->Other_Modules:
deactivate camxncsservice

alt **Old way of Calling**
Other_Modules->X camxtofsensorintf: **GetInstance()**
activate camxtofsensorintf
    note over Other_Modules
        This Old way, other module still interact directly
        with camxtofsensorintf
    end note
camxtofsensorintf->Other_Modules:
deactivate camxtofsensorintf
end

... ...
== <color:blue> How to fit current TOF intf to NCSIntf </color>==
note right camxtofsensorintf
<img ./TOF_Intf.png>
end note
... ...
== <color:blue> What should be keeped and stay no change </color>==
note over camxtofsensorintf
  /// Current TOF sensor library implements Android sensor HAL interface. As per specification, every hardware
  /// module must have a data structure named HAL_MODULE_INFO_SYM
  /// Get sensor module handle address

  1. Open
  pModule = static_cast<struct sensors_module_t *> (OsUtils::LibGetAddr
  pModule->common.methods->open

  2. close
  pDevice->common.close

  3. activate
  pDevice->activate

  4. poll
  pDevice->poll

  5. batch
  pDevice->batch


end note
@enduml
