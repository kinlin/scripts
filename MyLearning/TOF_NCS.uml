/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6.


class Dummy {
 -field1                     -------private
 #field2                     -------protected
 ~method1()                  -------package private
 +method2()                  -------public
}
'/
participant Other_Modules << (U,#ADD1B2) >>
participant camxncsservice
participant camxncsintftofsensor
participant camxncsprovider
@startuml
== <color:blue> How Tof is Link to NCSService </color>==
[o-> camxncsservice: **NCSService::Initialize**
activate camxncsservice
    alt **NCSIntfType == TOF**
        note over camxncsservice
            This will run during camera bootup time
            If we need this duration Log, kill camera server and logcat can got the
            ncs server Log
        end note
        camxncsservice->camxncsintftofsensor: **GetInstance()**
        activate camxncsintftofsensor
            note right camxncsservice
                got pNCSIntfObject and then call the INCSIntfBase public API
            end note
        camxncsintftofsensor->camxncsservice:
        deactivate camxncsintftofsensor

        camxncsservice->camxncsintftofsensor: **ListSensors()**
        activate camxncsintftofsensor
            note over camxncsintftofsensor
                Load TOF Sensor Lib and Open it
            end note
        camxncsintftofsensor->camxncsservice:
        deactivate camxncsintftofsensor

        camxncsservice->camxncsintftofsensor: **QueryCapabilites()**
        activate camxncsintftofsensor
            note over camxncsintftofsensor
                query Sensor Capability, like distance Range and name, vendor...
            end note
        camxncsintftofsensor->camxncsservice:
        deactivate camxncsintftofsensor

        camxncsservice->camxncsintftofsensor: **GetCaps()**
        activate camxncsintftofsensor
        camxncsintftofsensor->camxncsservice:
        deactivate camxncsintftofsensor

        camxncsservice->camxncsservice: **RegisterProvider()**
        activate camxncsservice
        camxncsservice->camxncsservice:
        deactivate camxncsservice
    end
[<- camxncsservice:
deactivate camxncsservice
... ...
== <color:blue> How Other Module call TOF through NCS </color>==
Other_Modules->camxncsservice: **m_pNCSServiceObject->RegisterService(NCSIntfType)**
activate camxncsservice
    note over camxncsservice
        1. Then Modules can call the GetLastNSamples() fetch data
        2. ReconfigureSensor()    etc..
    end note
camxncsservice->Other_Modules:
deactivate camxncsservice

alt **Old way of Calling**
Other_Modules->X camxncsintftofsensor: **GetInstance()**
activate camxncsintftofsensor
    note over Other_Modules
        This Old way, other module still interact directly
        with camxncsintftofsensor
    end note
camxncsintftofsensor->Other_Modules:
deactivate camxncsintftofsensor
end

... ...
== <color:blue> How to fit current TOF intf to NCSIntf </color>==
note right camxncsintftofsensor
<img ./TOF_Intf.png>
end note
... ...
== <color:blue> What should be keeped and stay no change </color>==
note over camxncsintftofsensor
  /// Current TOF sensor library implements Android sensor HAL interface. As per specification, every hardware
  /// module must have a data structure named HAL_MODULE_INFO_SYM
  /// Get sensor module handle address

  1. Open
  pModule = static_cast<struct sensors_module_t *> (OsUtils::LibGetAddr
  pModule->common.methods->open

  2. close
  pDevice->common.close

  3. activate
  pDevice->activate

  4. poll
  pDevice->poll

  5. batch
  pDevice->batch


end note
@enduml
