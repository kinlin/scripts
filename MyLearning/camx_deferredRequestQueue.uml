@startuml
title <size:18>camx DRQ overview</size>\n     Lin Jin


participant camxpipeline
box "DRQ"
participant camxdeferredrequestqueue as camx_drq
end box
participant camx_threadmanager
participant Hashmap
participant camxmetadatapool as camx_metapool
participant Node

== <color:blue> Initialize </color>==
[o->camx_drq: DeferredRequestQueue::Initialize()
activate camx_drq
  camx_drq->camx_threadmanager: **RegisterJobFamily**(\n<color:red>**DeferredWorkerWrapper**</color>,\nDeferredWorkerWrapper%d\nJobPriority::Normal,\n&m_hDeferredWorker)
  activate camx_threadmanager
  camx_threadmanager->camx_drq: return
  deactivate camx_threadmanager

  camx_drq->Hashmap: Hashmap::Create()
  activate Hashmap
  Hashmap->camx_drq: return
  deactivate Hashmap

  camx_drq->camx_metapool: **SubscribeAll**(<IPropertyPoolObserver*>(this),\n"DeferredRequestQueue")
  activate camx_metapool
  camx_metapool->camx_drq: reture
  deactivate camx_metapool
[o<-camx_drq: return
deactivate camx_drq

== <color:blue>Thread job </color>==
camx_threadmanager->camx_drq: <color:red>**DeferredWorkerWrapper**</color>
activate camx_drq
  camx_drq->camx_drq: **DeferredWorkerCore**
  activate camx_drq
    camx_drq->Node: <color:red>**ProcessRequest**</color>
    activate Node #Red
    Node->camx_drq: return
    deactivate Node
  camx_drq->camx_drq: return
  deactivate camx_drq

  loop processRequest.numDependencyLists
    camx_drq->camx_drq: AddDeferredNode
    activate camx_drq
      alt **TRUE==hasPropertyDependency**
        note right camx_drq
          call **GetUnpublishedList()**
        end note
      end
      alt **TRUE==hasBufferDependency**
        note right camx_drq
          pDependency->phFences[fenceCount++]
        end note
      end
      alt **TRUE==hasFenceDependency**
        note right camx_drq
          pChiFences[chiFenceCount++]
          pChiFenceCallback
          pUserData
        end note
      end
      camx_drq->camx_drq: **AddDependencyEntry()**
      activate camx_drq
      camx_drq->camx_drq: return
      deactivate camx_drq
    camx_drq->camx_drq: return
    deactivate camx_drq
  end loop

camx_drq->camx_threadmanager: return
deactivate camx_drq

... ...
== <color:blue>Pipeline->DRQ->Node </color>==
[->camxpipeline: **ProcessRequest**\n**(PipelineProcessRequestData*)**
activate camxpipeline
  loop **m_nodeCount**
    camxpipeline->camx_drq: **AddDeferredNode**\n(requestId,\nm_ppNodes[i],\n(pDependencyUnit=)NULL)
    activate camx_drq

      alt pDependencyUnit==NULL
        camx_drq->camx_drq: **AddDependencyEntry(pDependency)**
        activate camx_drq
          loop pDependency->propertyCount
          end loop

          loop pDependency->fenceCount
          end loop

          loop pDependency->chiFenceCount
            note over camx_drq
              ChiFences type == ChiFenceTypeInternal
              result=**CSLFenceAsycWait(pDependency->pChiFences[i]->hFence,**
                     **&this->DependencyFenceCallbackCSL,pData)**
            end note
          end loop
        camx_drq->camx_drq: return
        deactivate camx_drq
      else

      end

    camx_drq->camxpipeline: return
    deactivate camx_drq

    camxpipeline->camx_drq: **DispatchReadyNodes()**
    activate camx_drq
      alt **TRUE == m_isPreemptDependencyEnabled**
        note over camx_drq
          If preempt dependency enabled and dependency
          registered for preemption clear node
          dependency in deferred list first.
        end note
      end
      loop m_readyNodes.NumNodes()
        note over camx_drq
          1. pDependency-><color:red>**pChiFenceCallback**</color>()
             as class ChiNodeWrapper final: public Node
             so pChiFenceCallback is **ChiFenceDependencyCallback**
             Any wrong?
          2. m_pThreadManager->PostJob(m_hDeferredWorker)
             This callback is <color:red>**DeferredWorkerWrapper**</color>
        end note
      end loop
    camx_drq->camxpipeline: return
    deactivate camx_drq
  end loop
[<-camxpipeline: return
deactivate camxpipeline
@enduml
