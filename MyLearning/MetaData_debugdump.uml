/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6. 
'/

@startuml
title <size:18>Metadata overview</size>\n     Lin Jin
participant camxpipeline
participant camxsession
participant chifeature2baserequestflow

== <color:blue> When Init Debug Data Buffer </color>==
[o->camxpipeline: *Pipeline::ProcessRequest*
activate camxpipeline
    alt if *IsDebugDataEnable==TRUE*
        camxpipeline->camxpipeline: *InitializeDebugDataBuffer*
        note over camxpipeline: AEC/AWB/AF/IFETuning/IPETuning/BPSTuning
        camxpipeline->camxpipeline: return
    end

[o<-camxpipeline: return
deactivate camxpipeline
... ...

[o->camxsession: **session::initialize**
activate camxsession
    alt UseInternalDebugDataMemory==TRUE
        camxsession->camxsession: *AllocateDebugDataPool()*
    end
[o<-camxsession: return
deactivate camxsession

... ...
== <color:blue> 哪里会执行dump </color>==
[o->camxsession: *session::ProcessCaptureRequest*
activate camxsession
    alt UseInternalDebugDataMemory==TRUE
        note over camxsession
        GetDebugDataForSlot
        InitDebugDataSlot
        end note
    end

    alt pMetadataSlot!=NULL
        note over camxsession
        pMetadataSlot->AttachMetabuffer(pInputMetabuffer)
        pResultMetadataSlot->AttachMetabuffer(pOutputMetabuffer)

        pInputMetabuffer->DumpDetailsToFile: 将不同Request(如两个realtime的)的Input Meta Dump出来
        end note
    end

[o<-camxsession: *return*
deactivate camxsession
... ...
[o->camxpipeline: *ProcessMetadataRequestIdDone*
activate camxpipeline
    note over camxpipeline
        DumpDetailsToFile
    end note
[o<-camxpipeline: return
deactivate camxpipeline

... ...
[o->chifeature2baserequestflow: *ExecuteFlowType0*
activate chifeature2baserequestflow
    alt EnableFeature2Dump && GetFeatureId==B2Y
        note over chifeature2baserequestflow
            DumpInputMetaBuffer(inputMetaInfo)
            DumpInputImageBuffer(inputBufferInfo)
        end note
    end
[o<-chifeature2baserequestflow: return
deactivate chifeature2baserequestflow
== <color:blue> topic </color>==

@enduml
