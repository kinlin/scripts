/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box



<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6. 
'/
@startuml
participant Usecase
participant Feature
participant chxpipeline
participant camxchicontext
participant camxpipeline
participant camxnode
note left Usecase
    most create pipeline in Usecase
    Some special Feature like QCFA need Ceate themselves

tips:
ChiContext::CreatePipelineDescriptor >>> will do some pipeline source init
    -> pipeline:create               >>> initialize, follow topology
        ->camxnode                   >>> node by node
end note
== <color:blue> Details: 1. pipeline createDescriptor </color>==

Feature->chxpipeline: **CreateDescriptor()**
activate chxpipeline
  note over chxpipeline
    Fill <color:blue>pipelineCreateData</color>
  end note

  chxpipeline->chxpipeline: **SetTuningUsecase()**
  activate chxpipeline
  chxpipeline->chxpipeline: return
  deactivate chxpipeline

  alt pipelineDescriptor.**numNodes**
    note over chxpipeline
      check if Node has Prop
        <color:blue>NodePropertyStatsSkipPattern</color>
        <color:blue>NodePropertyEnableFOVC</color>
      Before this and after this checking
      will run <color:blue>pipelineDescriptor </color>
      <color:blue>AddReference and ReleaseReference</color>
    end note
  end

  chxpipeline->camxchicontext: **CreatePipelineDescriptor()**
  activate camxchicontext
    note over camxchicontext
      1. <color:blue>Check Stream outputPort</color>
         <color:blue>set A.isHDR, B.isSecureMode C.isHFRMode</color>
    end note

    camxchicontext->camxchicontext: **SetChiStreamInfo()**
    activate camxchicontext
    camxchicontext->camxchicontext: return
    deactivate camxchicontext

    camxchicontext->camxchicontext: **ProcessPipelineCreateDesc()**
    activate camxchicontext
      note over camxchicontext
        1. malloc InputPort/OutputPort Source
        2. Process Node links (Find if Src outputPort== Dest input port)
      end note
    camxchicontext->camxchicontext: return
    deactivate camxchicontext


    camxchicontext->camxchicontext: **SetPipelineDescriptorOutput()**
    activate camxchicontext
    camxchicontext->camxchicontext: return
    deactivate camxchicontext


    camxchicontext->camxpipeline: **Pipeline::Create(** \n **pCreateInputData** \n pCreateOutputData)**
    activate camxpipeline

      camxpipeline->camxpipeline: **Pipeline::Initialize()**
      activate camxpipeline
        
        note over camxpipeline
          <color:blue>MetadataPool::Create(PerUsecase)</color>
        end note

        camxpipeline->camxpipeline: **SetNumBatchedFrames()**
        activate camxpipeline
        camxpipeline->camxpipeline: return
        deactivate camxpipeline

        alt <color:blue>IsRealTime() == TRUE</color>
          camxpipeline->camxpipeline: **PublishOutputDimensions()**
          activate camxpipeline
          camxpipeline->camxpipeline: return
          deactivate camxpipeline

          camxpipeline->camxpipeline: <color:blue>**CreateNodes()**</color>
          activate camxpipeline
          camxpipeline->camxpipeline: return
          deactivate camxpipeline
        end


        camxpipeline->camxpipeline: **SetChiStreamInfo()**
        activate camxpipeline
        camxpipeline->camxpipeline: return
        deactivate camxpipeline

        camxpipeline->camxpipeline: **SetPipelineStatus(<color:blue>INITIALIZED</color>)**
        activate camxpipeline

          loop m_nodeCount
            note over camxpipeline
              <color:blue>**According to Component name like ALGOAF/ALGOAEC/ALGOPD**</color>
              <color:blue>**set createInputData pAFAlgoCallbacks/pPDLibCallbacks**</color>
            end
            
            camxnode->camxnode: <color:blue>**Node::Create()**</color>
            activate camxnode

              camxnode->camxnode: <color:blue>**pFactory->CreateNode()**</color>
              activate camxnode
                rnote over camxnode
                  <color:red>**For node below will create in camxtitan17xfactory **</color>
                  <color:blue>**AutoFocus**</color>
                  <color:blue>**AUtoWhiteBalance**</color>
                  <color:blue>**BPS**</color>
                  <color:blue>**IFE**</color>
                  <color:blue>**IPE**</color>
                  <color:blue>**Sensor**</color>
                  <color:blue>**StatsProcessing**</color>
                  <color:blue>**JPEG**</color>
                  <color:blue>**JPEGAggregator**</color>
                  <color:blue>**StatsParse**</color>
                  <color:blue>**ChiExternalNode**</color>
                  <color:blue>**FDHw**</color>
                  <color:blue>**FDManager**</color>
                  <color:blue>**OfflineStats**</color>
                  <color:blue>**Torch**</color>
                  <color:blue>**LRME**</color>
                  <color:blue>**RANSAC**</color>
                end note
              camxnode->camxnode: return
              deactivate camxnode

              camxnode->camxnode: <color:blue>**Node::Initialize()**</color>
              activate camxnode
                note over camxnode
                <color:red>**For node Initialize**</color>
                <color:red>**This is a Big Component**</color>
                <color:red>**will Paint another svg for detail**</color>
                Concise tips:
                    1. initialize node input/output port with different buffer property
                    2. for src node, will call **CreateImageBufferManager**
                    3. run **ProcessingNodeInitialize**
                end note
              camxnode->camxnode: return
              deactivate camxnode

            camxnode->camxnode: return
            deactivate camxnode
          end loop

        camxpipeline->camxpipeline: return
        deactivate camxpipeline

      camxpipeline->camxpipeline: return
      deactivate camxpipeline

    camxpipeline->camxchicontext: return
    deactivate camxpipeline

  camxchicontext->chxpipeline: return
  deactivate  camxchicontext



chxpipeline->Feature: return
deactivate chxpipeline




== <color:blue> Details: 2. pipeline ProcessRequest </color>==
  note left Feature
    <color:red>For this part, already paint in V4L2 callback</color>
  end note
== <color:blue> Details: 3. pipeline flush </color>==
@enduml
