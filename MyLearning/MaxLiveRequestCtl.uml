/'派生，继承：<|--'/
/'组合：*-- ， 将会管理对象的生命周期'/
/'聚合：o--, 特指不管理对象的生命周期，但存在关联'/
/'
title <size:18>camx awb overview</size>\n     Lin Jin

collections ThreadUsers

<color:red><size:16>****</size></color>

<color:blue><size:15></size></color>

package <color:blue><size:15>**AWBDecisionAggregator** {
}

== <color:blue> CAWBMain::Configure </color>==

participant XXX

box "Factory"
participant camxcawbfactory as awb_factory
end box

note across: 新方法：\n""note across""
Bob->Alice
hnote across: 跨越所有参与者的备注。


<color:red>TODO: this need check further</color>


Useful color:
1. Red
Red Crimson DeepPink LightPink Salmon HotPink

2. Blue
MediumBlue Blue DodgerBlue DeepSkyBlue Cyan LightSkyBlue SlateBlue SkyBlue

3. Green
Chartreuse Green GreenYellow LawnGreen Lime LightGreen SpingGreen

4. Yellow
Yellow Gold LightGoldenRodYellow Orange LemonChiffon

5. Violet
DarkMagenta BlueViolet DardViolet Magenta Fuchsia Purple

6.


class Dummy {
 -field1                     -------private
 #field2                     -------protected
 ~method1()                  -------package private
 +method2()                  -------public
}
'/

@startuml
title <size:18>MaxLiveRequestCtl </size>\n     Lin Jin

box "feature2"
    participant feature2realtime
    participant feature2realtimemcx
end box
participant chxutils


[o->feature2realtime: **OnSessionCreate()**
activate feature2realtime
    note right feature2realtime
        Semaphore::Create(maxHalRequests - 1)
    end note
[<-feature2realtime:
deactivate feature2realtime

......
[o->feature2realtime: **AcquireResource()**
activate feature2realtime
    feature2realtime->chxutils: **WaitForSemaphore()**
    activate chxutils
        note right chxutils
            std::unique_lock<std::mutex> lock(m_mutex);
            while (m_semaphoreCount == 0)  wait
            m_semaphoreCount--
        end note
    chxutils->feature2realtime:
    deactivate chxutils
[<-feature2realtime:
deactivate feature2realtime

......
[o->feature2realtime: **ReleaseResource()**
activate feature2realtime
    feature2realtime->chxutils: **NotifyAllThread()**
    activate chxutils
        note right chxutils
            std::unique_lock<std::mutex> lock(m_mutex);
            m_semaphoreCount++
            m_semaphoreCv.notify_all()
        end note
    chxutils->feature2realtime:
    deactivate chxutils
[<-feature2realtime:
deactivate feature2realtime

@enduml
