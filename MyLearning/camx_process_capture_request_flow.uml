@startuml
title process_capture_request flow


participant camxhal3.cpp as camxhal3
participant camxhaldevice.cpp as camxhaldev
participant chxextensioninterface.cpp as chieintf
participant chxentensionmodule.cpp as chiemodule
participant chxusecase.cpp as chxusecase
participant camera_metadata.c as cmeta
participant chxusecasedefault.cpp as chxdef
participant chxusecasemc.cpp as chxmc
participant camxchicontext.cpp as chicontext
participant camxchi.cpp as camxchi
participant camxsession.cpp as camxsession
participant camxthreadmanager.cpp as camxthreadM

note left of camxhal3: framework call process_capture_request

camxhal3->camxhaldev:ProcessCaptureRequest
camxhaldev->chieintf: chi_override_process_request
chieintf->chiemodule:OverrideProcessRequest

opt usecase processcaptureRequest
chxusecase->chxusecase: GetChiOverrideFrameNum

chxusecase->chxusecase: ReplaceRequestMetadata
activate chxusecase
chxusecase->cmeta: place_camera_metadata
chxusecase->cmeta: append_camera_metadata
chxusecase->cmeta: find_camera_metadata
chxusecase->chxutils.cpp: SetVendorTagValue
chxutils.cpp->chxusecase: return
deactivate chxusecase

note right of cmeta: why we need to replace meta first?

opt ExecuteCaptureRequest
alt single camera case
chxusecase->chxdef: ExecuteCaptureRequest
chxdef->chxusecase: UpdateSensorModeIndex
chxdef->chxdef: SubmitChiRequest
chxdef->camxchi: ChiSubmitPipelineRequest
camxchi->chicontext: SubmitRequest
chicontext->camxsession: ProcessCaptureRequest
camxsession->camxthreadM: PostJob
note right of camxthreadM: post a job to thread pool

else multi camera case

chxusecase->chxmc: ExecuteCaptureRequest2

end

opt
chxusecase->chxusecase: RestoreRequestMetadata
end

end

@end
